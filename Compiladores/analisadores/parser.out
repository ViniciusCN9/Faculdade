Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    FOR
    OP_ATRI_DENIAL
    OP_ATRI_DIVISION_EQUAL
    OP_ATRI_MINUS_EQUAL
    OP_ATRI_PLUS_EQUAL
    OP_ATRI_TIMES_EQUAL
    OP_EXEC_COMMA
    OP_EXEC_DOT
    OP_EXPR_CLOSE_BRACKETS
    OP_EXPR_CLOSE_CURLY_BRACKETS
    OP_EXPR_OPEN_BRACKETS
    OP_EXPR_OPEN_CURLY_BRACKETS
    OP_LOGI_AND
    OP_LOGI_OR
    OP_MARK_DQUOTES
    OP_MARK_SQUOTES
    WHILE

Grammar

Rule 0     S' -> statements
Rule 1     statements -> statements statement
Rule 2     statements -> statement
Rule 3     statement -> comment
Rule 4     statement -> declaration
Rule 5     statement -> assignment
Rule 6     statement -> decision
Rule 7     statement -> expression
Rule 8     statement -> operation
Rule 9     statement -> conditional
Rule 10    statement -> value
Rule 11    decision -> IF OP_EXPR_OPEN_PARENTHESIS conditional OP_EXPR_CLOSE_PARENTHESIS OP_EXEC_COLON statement
Rule 12    decision -> IF OP_EXPR_OPEN_PARENTHESIS conditional OP_EXPR_CLOSE_PARENTHESIS OP_EXEC_COLON statement ELSE OP_EXEC_COLON statement
Rule 13    expression -> OP_EXPR_OPEN_PARENTHESIS conditional OP_EXPR_CLOSE_PARENTHESIS
Rule 14    expression -> OP_EXPR_OPEN_PARENTHESIS operation OP_EXPR_CLOSE_PARENTHESIS
Rule 15    expression -> OP_EXPR_OPEN_PARENTHESIS value OP_EXPR_CLOSE_PARENTHESIS
Rule 16    assignment -> INT VARIABLE OP_ATRI_EQUAL NUMERIC EOB
Rule 17    assignment -> DOUBLE VARIABLE OP_ATRI_EQUAL NUMERIC EOB
Rule 18    assignment -> BOOL VARIABLE OP_ATRI_EQUAL BOOLEAN EOB
Rule 19    assignment -> CHARACTER VARIABLE OP_ATRI_EQUAL CHAR EOB
Rule 20    assignment -> STRING VARIABLE OP_ATRI_EQUAL LITERAL EOB
Rule 21    assignment -> INT VARIABLE OP_ATRI_EQUAL VARIABLE EOB
Rule 22    assignment -> DOUBLE VARIABLE OP_ATRI_EQUAL VARIABLE EOB
Rule 23    assignment -> BOOL VARIABLE OP_ATRI_EQUAL VARIABLE EOB
Rule 24    assignment -> CHARACTER VARIABLE OP_ATRI_EQUAL VARIABLE EOB
Rule 25    assignment -> STRING VARIABLE OP_ATRI_EQUAL VARIABLE EOB
Rule 26    assignment -> INT VARIABLE OP_ATRI_EQUAL operation EOB
Rule 27    assignment -> DOUBLE VARIABLE OP_ATRI_EQUAL operation EOB
Rule 28    assignment -> VARIABLE OP_ATRI_EQUAL NUMERIC EOB
Rule 29    assignment -> VARIABLE OP_ATRI_EQUAL BOOLEAN EOB
Rule 30    assignment -> VARIABLE OP_ATRI_EQUAL CHARACTER EOB
Rule 31    assignment -> VARIABLE OP_ATRI_EQUAL LITERAL EOB
Rule 32    assignment -> VARIABLE OP_ATRI_EQUAL VARIABLE EOB
Rule 33    comment -> OP_MARK_COMMENT
Rule 34    declaration -> INT VARIABLE EOB
Rule 35    declaration -> DOUBLE VARIABLE EOB
Rule 36    declaration -> BOOL VARIABLE EOB
Rule 37    declaration -> CHARACTER VARIABLE EOB
Rule 38    declaration -> STRING VARIABLE EOB
Rule 39    operation -> VARIABLE OP_MATE_PLUS VARIABLE
Rule 40    operation -> VARIABLE OP_MATE_MINUS VARIABLE
Rule 41    operation -> VARIABLE OP_MATE_TIMES VARIABLE
Rule 42    operation -> VARIABLE OP_MATE_DIVISION VARIABLE
Rule 43    operation -> VARIABLE OP_MATE_MODULE VARIABLE
Rule 44    conditional -> VARIABLE OP_RELA_LESS NUMERIC
Rule 45    conditional -> VARIABLE OP_RELA_LESS BOOLEAN
Rule 46    conditional -> VARIABLE OP_RELA_LESS LITERAL
Rule 47    conditional -> VARIABLE OP_RELA_LESS CHARACTER
Rule 48    conditional -> VARIABLE OP_RELA_LESS VARIABLE
Rule 49    conditional -> VARIABLE OP_RELA_BIGGER NUMERIC
Rule 50    conditional -> VARIABLE OP_RELA_BIGGER BOOLEAN
Rule 51    conditional -> VARIABLE OP_RELA_BIGGER LITERAL
Rule 52    conditional -> VARIABLE OP_RELA_BIGGER CHARACTER
Rule 53    conditional -> VARIABLE OP_RELA_BIGGER VARIABLE
Rule 54    conditional -> VARIABLE OP_RELA_LESS_EQUAL NUMERIC
Rule 55    conditional -> VARIABLE OP_RELA_LESS_EQUAL BOOLEAN
Rule 56    conditional -> VARIABLE OP_RELA_LESS_EQUAL LITERAL
Rule 57    conditional -> VARIABLE OP_RELA_LESS_EQUAL CHARACTER
Rule 58    conditional -> VARIABLE OP_RELA_LESS_EQUAL VARIABLE
Rule 59    conditional -> VARIABLE OP_RELA_BIGGER_EQUAL NUMERIC
Rule 60    conditional -> VARIABLE OP_RELA_BIGGER_EQUAL BOOLEAN
Rule 61    conditional -> VARIABLE OP_RELA_BIGGER_EQUAL LITERAL
Rule 62    conditional -> VARIABLE OP_RELA_BIGGER_EQUAL CHARACTER
Rule 63    conditional -> VARIABLE OP_RELA_BIGGER_EQUAL VARIABLE
Rule 64    conditional -> VARIABLE OP_RELA_COMPARE NUMERIC
Rule 65    conditional -> VARIABLE OP_RELA_COMPARE BOOLEAN
Rule 66    conditional -> VARIABLE OP_RELA_COMPARE LITERAL
Rule 67    conditional -> VARIABLE OP_RELA_COMPARE CHARACTER
Rule 68    conditional -> VARIABLE OP_RELA_COMPARE VARIABLE
Rule 69    conditional -> VARIABLE OP_RELA_DIFFERENTIATE NUMERIC
Rule 70    conditional -> VARIABLE OP_RELA_DIFFERENTIATE BOOLEAN
Rule 71    conditional -> VARIABLE OP_RELA_DIFFERENTIATE LITERAL
Rule 72    conditional -> VARIABLE OP_RELA_DIFFERENTIATE CHARACTER
Rule 73    conditional -> VARIABLE OP_RELA_DIFFERENTIATE VARIABLE
Rule 74    value -> CHARACTER
Rule 75    value -> LITERAL
Rule 76    value -> NUMERIC
Rule 77    value -> BOOLEAN

Terminals, with rules where they appear

BOOL                 : 18 23 36
BOOLEAN              : 18 29 45 50 55 60 65 70 77
CHAR                 : 19
CHARACTER            : 19 24 30 37 47 52 57 62 67 72 74
DOUBLE               : 17 22 27 35
ELSE                 : 12
EOB                  : 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 34 35 36 37 38
FOR                  : 
IF                   : 11 12
INT                  : 16 21 26 34
LITERAL              : 20 31 46 51 56 61 66 71 75
NUMERIC              : 16 17 28 44 49 54 59 64 69 76
OP_ATRI_DENIAL       : 
OP_ATRI_DIVISION_EQUAL : 
OP_ATRI_EQUAL        : 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32
OP_ATRI_MINUS_EQUAL  : 
OP_ATRI_PLUS_EQUAL   : 
OP_ATRI_TIMES_EQUAL  : 
OP_EXEC_COLON        : 11 12 12
OP_EXEC_COMMA        : 
OP_EXEC_DOT          : 
OP_EXPR_CLOSE_BRACKETS : 
OP_EXPR_CLOSE_CURLY_BRACKETS : 
OP_EXPR_CLOSE_PARENTHESIS : 11 12 13 14 15
OP_EXPR_OPEN_BRACKETS : 
OP_EXPR_OPEN_CURLY_BRACKETS : 
OP_EXPR_OPEN_PARENTHESIS : 11 12 13 14 15
OP_LOGI_AND          : 
OP_LOGI_OR           : 
OP_MARK_COMMENT      : 33
OP_MARK_DQUOTES      : 
OP_MARK_SQUOTES      : 
OP_MATE_DIVISION     : 42
OP_MATE_MINUS        : 40
OP_MATE_MODULE       : 43
OP_MATE_PLUS         : 39
OP_MATE_TIMES        : 41
OP_RELA_BIGGER       : 49 50 51 52 53
OP_RELA_BIGGER_EQUAL : 59 60 61 62 63
OP_RELA_COMPARE      : 64 65 66 67 68
OP_RELA_DIFFERENTIATE : 69 70 71 72 73
OP_RELA_LESS         : 44 45 46 47 48
OP_RELA_LESS_EQUAL   : 54 55 56 57 58
STRING               : 20 25 38
VARIABLE             : 16 17 18 19 20 21 21 22 22 23 23 24 24 25 25 26 27 28 29 30 31 32 32 34 35 36 37 38 39 39 40 40 41 41 42 42 43 43 44 45 46 47 48 48 49 50 51 52 53 53 54 55 56 57 58 58 59 60 61 62 63 63 64 65 66 67 68 68 69 70 71 72 73 73
WHILE                : 
error                : 

Nonterminals, with rules where they appear

assignment           : 5
comment              : 3
conditional          : 9 11 12 13
decision             : 6
declaration          : 4
expression           : 7
operation            : 8 14 26 27
statement            : 1 2 11 12 12
statements           : 1 0
value                : 10 15

Parsing method: LALR

state 0

    (0) S' -> . statements
    (1) statements -> . statements statement
    (2) statements -> . statement
    (3) statement -> . comment
    (4) statement -> . declaration
    (5) statement -> . assignment
    (6) statement -> . decision
    (7) statement -> . expression
    (8) statement -> . operation
    (9) statement -> . conditional
    (10) statement -> . value
    (33) comment -> . OP_MARK_COMMENT
    (34) declaration -> . INT VARIABLE EOB
    (35) declaration -> . DOUBLE VARIABLE EOB
    (36) declaration -> . BOOL VARIABLE EOB
    (37) declaration -> . CHARACTER VARIABLE EOB
    (38) declaration -> . STRING VARIABLE EOB
    (16) assignment -> . INT VARIABLE OP_ATRI_EQUAL NUMERIC EOB
    (17) assignment -> . DOUBLE VARIABLE OP_ATRI_EQUAL NUMERIC EOB
    (18) assignment -> . BOOL VARIABLE OP_ATRI_EQUAL BOOLEAN EOB
    (19) assignment -> . CHARACTER VARIABLE OP_ATRI_EQUAL CHAR EOB
    (20) assignment -> . STRING VARIABLE OP_ATRI_EQUAL LITERAL EOB
    (21) assignment -> . INT VARIABLE OP_ATRI_EQUAL VARIABLE EOB
    (22) assignment -> . DOUBLE VARIABLE OP_ATRI_EQUAL VARIABLE EOB
    (23) assignment -> . BOOL VARIABLE OP_ATRI_EQUAL VARIABLE EOB
    (24) assignment -> . CHARACTER VARIABLE OP_ATRI_EQUAL VARIABLE EOB
    (25) assignment -> . STRING VARIABLE OP_ATRI_EQUAL VARIABLE EOB
    (26) assignment -> . INT VARIABLE OP_ATRI_EQUAL operation EOB
    (27) assignment -> . DOUBLE VARIABLE OP_ATRI_EQUAL operation EOB
    (28) assignment -> . VARIABLE OP_ATRI_EQUAL NUMERIC EOB
    (29) assignment -> . VARIABLE OP_ATRI_EQUAL BOOLEAN EOB
    (30) assignment -> . VARIABLE OP_ATRI_EQUAL CHARACTER EOB
    (31) assignment -> . VARIABLE OP_ATRI_EQUAL LITERAL EOB
    (32) assignment -> . VARIABLE OP_ATRI_EQUAL VARIABLE EOB
    (11) decision -> . IF OP_EXPR_OPEN_PARENTHESIS conditional OP_EXPR_CLOSE_PARENTHESIS OP_EXEC_COLON statement
    (12) decision -> . IF OP_EXPR_OPEN_PARENTHESIS conditional OP_EXPR_CLOSE_PARENTHESIS OP_EXEC_COLON statement ELSE OP_EXEC_COLON statement
    (13) expression -> . OP_EXPR_OPEN_PARENTHESIS conditional OP_EXPR_CLOSE_PARENTHESIS
    (14) expression -> . OP_EXPR_OPEN_PARENTHESIS operation OP_EXPR_CLOSE_PARENTHESIS
    (15) expression -> . OP_EXPR_OPEN_PARENTHESIS value OP_EXPR_CLOSE_PARENTHESIS
    (39) operation -> . VARIABLE OP_MATE_PLUS VARIABLE
    (40) operation -> . VARIABLE OP_MATE_MINUS VARIABLE
    (41) operation -> . VARIABLE OP_MATE_TIMES VARIABLE
    (42) operation -> . VARIABLE OP_MATE_DIVISION VARIABLE
    (43) operation -> . VARIABLE OP_MATE_MODULE VARIABLE
    (44) conditional -> . VARIABLE OP_RELA_LESS NUMERIC
    (45) conditional -> . VARIABLE OP_RELA_LESS BOOLEAN
    (46) conditional -> . VARIABLE OP_RELA_LESS LITERAL
    (47) conditional -> . VARIABLE OP_RELA_LESS CHARACTER
    (48) conditional -> . VARIABLE OP_RELA_LESS VARIABLE
    (49) conditional -> . VARIABLE OP_RELA_BIGGER NUMERIC
    (50) conditional -> . VARIABLE OP_RELA_BIGGER BOOLEAN
    (51) conditional -> . VARIABLE OP_RELA_BIGGER LITERAL
    (52) conditional -> . VARIABLE OP_RELA_BIGGER CHARACTER
    (53) conditional -> . VARIABLE OP_RELA_BIGGER VARIABLE
    (54) conditional -> . VARIABLE OP_RELA_LESS_EQUAL NUMERIC
    (55) conditional -> . VARIABLE OP_RELA_LESS_EQUAL BOOLEAN
    (56) conditional -> . VARIABLE OP_RELA_LESS_EQUAL LITERAL
    (57) conditional -> . VARIABLE OP_RELA_LESS_EQUAL CHARACTER
    (58) conditional -> . VARIABLE OP_RELA_LESS_EQUAL VARIABLE
    (59) conditional -> . VARIABLE OP_RELA_BIGGER_EQUAL NUMERIC
    (60) conditional -> . VARIABLE OP_RELA_BIGGER_EQUAL BOOLEAN
    (61) conditional -> . VARIABLE OP_RELA_BIGGER_EQUAL LITERAL
    (62) conditional -> . VARIABLE OP_RELA_BIGGER_EQUAL CHARACTER
    (63) conditional -> . VARIABLE OP_RELA_BIGGER_EQUAL VARIABLE
    (64) conditional -> . VARIABLE OP_RELA_COMPARE NUMERIC
    (65) conditional -> . VARIABLE OP_RELA_COMPARE BOOLEAN
    (66) conditional -> . VARIABLE OP_RELA_COMPARE LITERAL
    (67) conditional -> . VARIABLE OP_RELA_COMPARE CHARACTER
    (68) conditional -> . VARIABLE OP_RELA_COMPARE VARIABLE
    (69) conditional -> . VARIABLE OP_RELA_DIFFERENTIATE NUMERIC
    (70) conditional -> . VARIABLE OP_RELA_DIFFERENTIATE BOOLEAN
    (71) conditional -> . VARIABLE OP_RELA_DIFFERENTIATE LITERAL
    (72) conditional -> . VARIABLE OP_RELA_DIFFERENTIATE CHARACTER
    (73) conditional -> . VARIABLE OP_RELA_DIFFERENTIATE VARIABLE
    (74) value -> . CHARACTER
    (75) value -> . LITERAL
    (76) value -> . NUMERIC
    (77) value -> . BOOLEAN

    OP_MARK_COMMENT shift and go to state 11
    INT             shift and go to state 12
    DOUBLE          shift and go to state 14
    BOOL            shift and go to state 15
    CHARACTER       shift and go to state 16
    STRING          shift and go to state 17
    VARIABLE        shift and go to state 13
    IF              shift and go to state 21
    OP_EXPR_OPEN_PARENTHESIS shift and go to state 22
    LITERAL         shift and go to state 20
    NUMERIC         shift and go to state 18
    BOOLEAN         shift and go to state 19

    statements                     shift and go to state 1
    statement                      shift and go to state 2
    comment                        shift and go to state 3
    declaration                    shift and go to state 4
    assignment                     shift and go to state 5
    decision                       shift and go to state 6
    expression                     shift and go to state 7
    operation                      shift and go to state 8
    conditional                    shift and go to state 9
    value                          shift and go to state 10

state 1

    (0) S' -> statements .
    (1) statements -> statements . statement
    (3) statement -> . comment
    (4) statement -> . declaration
    (5) statement -> . assignment
    (6) statement -> . decision
    (7) statement -> . expression
    (8) statement -> . operation
    (9) statement -> . conditional
    (10) statement -> . value
    (33) comment -> . OP_MARK_COMMENT
    (34) declaration -> . INT VARIABLE EOB
    (35) declaration -> . DOUBLE VARIABLE EOB
    (36) declaration -> . BOOL VARIABLE EOB
    (37) declaration -> . CHARACTER VARIABLE EOB
    (38) declaration -> . STRING VARIABLE EOB
    (16) assignment -> . INT VARIABLE OP_ATRI_EQUAL NUMERIC EOB
    (17) assignment -> . DOUBLE VARIABLE OP_ATRI_EQUAL NUMERIC EOB
    (18) assignment -> . BOOL VARIABLE OP_ATRI_EQUAL BOOLEAN EOB
    (19) assignment -> . CHARACTER VARIABLE OP_ATRI_EQUAL CHAR EOB
    (20) assignment -> . STRING VARIABLE OP_ATRI_EQUAL LITERAL EOB
    (21) assignment -> . INT VARIABLE OP_ATRI_EQUAL VARIABLE EOB
    (22) assignment -> . DOUBLE VARIABLE OP_ATRI_EQUAL VARIABLE EOB
    (23) assignment -> . BOOL VARIABLE OP_ATRI_EQUAL VARIABLE EOB
    (24) assignment -> . CHARACTER VARIABLE OP_ATRI_EQUAL VARIABLE EOB
    (25) assignment -> . STRING VARIABLE OP_ATRI_EQUAL VARIABLE EOB
    (26) assignment -> . INT VARIABLE OP_ATRI_EQUAL operation EOB
    (27) assignment -> . DOUBLE VARIABLE OP_ATRI_EQUAL operation EOB
    (28) assignment -> . VARIABLE OP_ATRI_EQUAL NUMERIC EOB
    (29) assignment -> . VARIABLE OP_ATRI_EQUAL BOOLEAN EOB
    (30) assignment -> . VARIABLE OP_ATRI_EQUAL CHARACTER EOB
    (31) assignment -> . VARIABLE OP_ATRI_EQUAL LITERAL EOB
    (32) assignment -> . VARIABLE OP_ATRI_EQUAL VARIABLE EOB
    (11) decision -> . IF OP_EXPR_OPEN_PARENTHESIS conditional OP_EXPR_CLOSE_PARENTHESIS OP_EXEC_COLON statement
    (12) decision -> . IF OP_EXPR_OPEN_PARENTHESIS conditional OP_EXPR_CLOSE_PARENTHESIS OP_EXEC_COLON statement ELSE OP_EXEC_COLON statement
    (13) expression -> . OP_EXPR_OPEN_PARENTHESIS conditional OP_EXPR_CLOSE_PARENTHESIS
    (14) expression -> . OP_EXPR_OPEN_PARENTHESIS operation OP_EXPR_CLOSE_PARENTHESIS
    (15) expression -> . OP_EXPR_OPEN_PARENTHESIS value OP_EXPR_CLOSE_PARENTHESIS
    (39) operation -> . VARIABLE OP_MATE_PLUS VARIABLE
    (40) operation -> . VARIABLE OP_MATE_MINUS VARIABLE
    (41) operation -> . VARIABLE OP_MATE_TIMES VARIABLE
    (42) operation -> . VARIABLE OP_MATE_DIVISION VARIABLE
    (43) operation -> . VARIABLE OP_MATE_MODULE VARIABLE
    (44) conditional -> . VARIABLE OP_RELA_LESS NUMERIC
    (45) conditional -> . VARIABLE OP_RELA_LESS BOOLEAN
    (46) conditional -> . VARIABLE OP_RELA_LESS LITERAL
    (47) conditional -> . VARIABLE OP_RELA_LESS CHARACTER
    (48) conditional -> . VARIABLE OP_RELA_LESS VARIABLE
    (49) conditional -> . VARIABLE OP_RELA_BIGGER NUMERIC
    (50) conditional -> . VARIABLE OP_RELA_BIGGER BOOLEAN
    (51) conditional -> . VARIABLE OP_RELA_BIGGER LITERAL
    (52) conditional -> . VARIABLE OP_RELA_BIGGER CHARACTER
    (53) conditional -> . VARIABLE OP_RELA_BIGGER VARIABLE
    (54) conditional -> . VARIABLE OP_RELA_LESS_EQUAL NUMERIC
    (55) conditional -> . VARIABLE OP_RELA_LESS_EQUAL BOOLEAN
    (56) conditional -> . VARIABLE OP_RELA_LESS_EQUAL LITERAL
    (57) conditional -> . VARIABLE OP_RELA_LESS_EQUAL CHARACTER
    (58) conditional -> . VARIABLE OP_RELA_LESS_EQUAL VARIABLE
    (59) conditional -> . VARIABLE OP_RELA_BIGGER_EQUAL NUMERIC
    (60) conditional -> . VARIABLE OP_RELA_BIGGER_EQUAL BOOLEAN
    (61) conditional -> . VARIABLE OP_RELA_BIGGER_EQUAL LITERAL
    (62) conditional -> . VARIABLE OP_RELA_BIGGER_EQUAL CHARACTER
    (63) conditional -> . VARIABLE OP_RELA_BIGGER_EQUAL VARIABLE
    (64) conditional -> . VARIABLE OP_RELA_COMPARE NUMERIC
    (65) conditional -> . VARIABLE OP_RELA_COMPARE BOOLEAN
    (66) conditional -> . VARIABLE OP_RELA_COMPARE LITERAL
    (67) conditional -> . VARIABLE OP_RELA_COMPARE CHARACTER
    (68) conditional -> . VARIABLE OP_RELA_COMPARE VARIABLE
    (69) conditional -> . VARIABLE OP_RELA_DIFFERENTIATE NUMERIC
    (70) conditional -> . VARIABLE OP_RELA_DIFFERENTIATE BOOLEAN
    (71) conditional -> . VARIABLE OP_RELA_DIFFERENTIATE LITERAL
    (72) conditional -> . VARIABLE OP_RELA_DIFFERENTIATE CHARACTER
    (73) conditional -> . VARIABLE OP_RELA_DIFFERENTIATE VARIABLE
    (74) value -> . CHARACTER
    (75) value -> . LITERAL
    (76) value -> . NUMERIC
    (77) value -> . BOOLEAN

    OP_MARK_COMMENT shift and go to state 11
    INT             shift and go to state 12
    DOUBLE          shift and go to state 14
    BOOL            shift and go to state 15
    CHARACTER       shift and go to state 16
    STRING          shift and go to state 17
    VARIABLE        shift and go to state 13
    IF              shift and go to state 21
    OP_EXPR_OPEN_PARENTHESIS shift and go to state 22
    LITERAL         shift and go to state 20
    NUMERIC         shift and go to state 18
    BOOLEAN         shift and go to state 19

    statement                      shift and go to state 23
    comment                        shift and go to state 3
    declaration                    shift and go to state 4
    assignment                     shift and go to state 5
    decision                       shift and go to state 6
    expression                     shift and go to state 7
    operation                      shift and go to state 8
    conditional                    shift and go to state 9
    value                          shift and go to state 10

state 2

    (2) statements -> statement .

    OP_MARK_COMMENT reduce using rule 2 (statements -> statement .)
    INT             reduce using rule 2 (statements -> statement .)
    DOUBLE          reduce using rule 2 (statements -> statement .)
    BOOL            reduce using rule 2 (statements -> statement .)
    CHARACTER       reduce using rule 2 (statements -> statement .)
    STRING          reduce using rule 2 (statements -> statement .)
    VARIABLE        reduce using rule 2 (statements -> statement .)
    IF              reduce using rule 2 (statements -> statement .)
    OP_EXPR_OPEN_PARENTHESIS reduce using rule 2 (statements -> statement .)
    LITERAL         reduce using rule 2 (statements -> statement .)
    NUMERIC         reduce using rule 2 (statements -> statement .)
    BOOLEAN         reduce using rule 2 (statements -> statement .)
    $end            reduce using rule 2 (statements -> statement .)


state 3

    (3) statement -> comment .

    OP_MARK_COMMENT reduce using rule 3 (statement -> comment .)
    INT             reduce using rule 3 (statement -> comment .)
    DOUBLE          reduce using rule 3 (statement -> comment .)
    BOOL            reduce using rule 3 (statement -> comment .)
    CHARACTER       reduce using rule 3 (statement -> comment .)
    STRING          reduce using rule 3 (statement -> comment .)
    VARIABLE        reduce using rule 3 (statement -> comment .)
    IF              reduce using rule 3 (statement -> comment .)
    OP_EXPR_OPEN_PARENTHESIS reduce using rule 3 (statement -> comment .)
    LITERAL         reduce using rule 3 (statement -> comment .)
    NUMERIC         reduce using rule 3 (statement -> comment .)
    BOOLEAN         reduce using rule 3 (statement -> comment .)
    $end            reduce using rule 3 (statement -> comment .)
    ELSE            reduce using rule 3 (statement -> comment .)


state 4

    (4) statement -> declaration .

    OP_MARK_COMMENT reduce using rule 4 (statement -> declaration .)
    INT             reduce using rule 4 (statement -> declaration .)
    DOUBLE          reduce using rule 4 (statement -> declaration .)
    BOOL            reduce using rule 4 (statement -> declaration .)
    CHARACTER       reduce using rule 4 (statement -> declaration .)
    STRING          reduce using rule 4 (statement -> declaration .)
    VARIABLE        reduce using rule 4 (statement -> declaration .)
    IF              reduce using rule 4 (statement -> declaration .)
    OP_EXPR_OPEN_PARENTHESIS reduce using rule 4 (statement -> declaration .)
    LITERAL         reduce using rule 4 (statement -> declaration .)
    NUMERIC         reduce using rule 4 (statement -> declaration .)
    BOOLEAN         reduce using rule 4 (statement -> declaration .)
    $end            reduce using rule 4 (statement -> declaration .)
    ELSE            reduce using rule 4 (statement -> declaration .)


state 5

    (5) statement -> assignment .

    OP_MARK_COMMENT reduce using rule 5 (statement -> assignment .)
    INT             reduce using rule 5 (statement -> assignment .)
    DOUBLE          reduce using rule 5 (statement -> assignment .)
    BOOL            reduce using rule 5 (statement -> assignment .)
    CHARACTER       reduce using rule 5 (statement -> assignment .)
    STRING          reduce using rule 5 (statement -> assignment .)
    VARIABLE        reduce using rule 5 (statement -> assignment .)
    IF              reduce using rule 5 (statement -> assignment .)
    OP_EXPR_OPEN_PARENTHESIS reduce using rule 5 (statement -> assignment .)
    LITERAL         reduce using rule 5 (statement -> assignment .)
    NUMERIC         reduce using rule 5 (statement -> assignment .)
    BOOLEAN         reduce using rule 5 (statement -> assignment .)
    $end            reduce using rule 5 (statement -> assignment .)
    ELSE            reduce using rule 5 (statement -> assignment .)


state 6

    (6) statement -> decision .

    OP_MARK_COMMENT reduce using rule 6 (statement -> decision .)
    INT             reduce using rule 6 (statement -> decision .)
    DOUBLE          reduce using rule 6 (statement -> decision .)
    BOOL            reduce using rule 6 (statement -> decision .)
    CHARACTER       reduce using rule 6 (statement -> decision .)
    STRING          reduce using rule 6 (statement -> decision .)
    VARIABLE        reduce using rule 6 (statement -> decision .)
    IF              reduce using rule 6 (statement -> decision .)
    OP_EXPR_OPEN_PARENTHESIS reduce using rule 6 (statement -> decision .)
    LITERAL         reduce using rule 6 (statement -> decision .)
    NUMERIC         reduce using rule 6 (statement -> decision .)
    BOOLEAN         reduce using rule 6 (statement -> decision .)
    $end            reduce using rule 6 (statement -> decision .)
    ELSE            reduce using rule 6 (statement -> decision .)


state 7

    (7) statement -> expression .

    OP_MARK_COMMENT reduce using rule 7 (statement -> expression .)
    INT             reduce using rule 7 (statement -> expression .)
    DOUBLE          reduce using rule 7 (statement -> expression .)
    BOOL            reduce using rule 7 (statement -> expression .)
    CHARACTER       reduce using rule 7 (statement -> expression .)
    STRING          reduce using rule 7 (statement -> expression .)
    VARIABLE        reduce using rule 7 (statement -> expression .)
    IF              reduce using rule 7 (statement -> expression .)
    OP_EXPR_OPEN_PARENTHESIS reduce using rule 7 (statement -> expression .)
    LITERAL         reduce using rule 7 (statement -> expression .)
    NUMERIC         reduce using rule 7 (statement -> expression .)
    BOOLEAN         reduce using rule 7 (statement -> expression .)
    $end            reduce using rule 7 (statement -> expression .)
    ELSE            reduce using rule 7 (statement -> expression .)


state 8

    (8) statement -> operation .

    OP_MARK_COMMENT reduce using rule 8 (statement -> operation .)
    INT             reduce using rule 8 (statement -> operation .)
    DOUBLE          reduce using rule 8 (statement -> operation .)
    BOOL            reduce using rule 8 (statement -> operation .)
    CHARACTER       reduce using rule 8 (statement -> operation .)
    STRING          reduce using rule 8 (statement -> operation .)
    VARIABLE        reduce using rule 8 (statement -> operation .)
    IF              reduce using rule 8 (statement -> operation .)
    OP_EXPR_OPEN_PARENTHESIS reduce using rule 8 (statement -> operation .)
    LITERAL         reduce using rule 8 (statement -> operation .)
    NUMERIC         reduce using rule 8 (statement -> operation .)
    BOOLEAN         reduce using rule 8 (statement -> operation .)
    $end            reduce using rule 8 (statement -> operation .)
    ELSE            reduce using rule 8 (statement -> operation .)


state 9

    (9) statement -> conditional .

    OP_MARK_COMMENT reduce using rule 9 (statement -> conditional .)
    INT             reduce using rule 9 (statement -> conditional .)
    DOUBLE          reduce using rule 9 (statement -> conditional .)
    BOOL            reduce using rule 9 (statement -> conditional .)
    CHARACTER       reduce using rule 9 (statement -> conditional .)
    STRING          reduce using rule 9 (statement -> conditional .)
    VARIABLE        reduce using rule 9 (statement -> conditional .)
    IF              reduce using rule 9 (statement -> conditional .)
    OP_EXPR_OPEN_PARENTHESIS reduce using rule 9 (statement -> conditional .)
    LITERAL         reduce using rule 9 (statement -> conditional .)
    NUMERIC         reduce using rule 9 (statement -> conditional .)
    BOOLEAN         reduce using rule 9 (statement -> conditional .)
    $end            reduce using rule 9 (statement -> conditional .)
    ELSE            reduce using rule 9 (statement -> conditional .)


state 10

    (10) statement -> value .

    OP_MARK_COMMENT reduce using rule 10 (statement -> value .)
    INT             reduce using rule 10 (statement -> value .)
    DOUBLE          reduce using rule 10 (statement -> value .)
    BOOL            reduce using rule 10 (statement -> value .)
    CHARACTER       reduce using rule 10 (statement -> value .)
    STRING          reduce using rule 10 (statement -> value .)
    VARIABLE        reduce using rule 10 (statement -> value .)
    IF              reduce using rule 10 (statement -> value .)
    OP_EXPR_OPEN_PARENTHESIS reduce using rule 10 (statement -> value .)
    LITERAL         reduce using rule 10 (statement -> value .)
    NUMERIC         reduce using rule 10 (statement -> value .)
    BOOLEAN         reduce using rule 10 (statement -> value .)
    $end            reduce using rule 10 (statement -> value .)
    ELSE            reduce using rule 10 (statement -> value .)


state 11

    (33) comment -> OP_MARK_COMMENT .

    OP_MARK_COMMENT reduce using rule 33 (comment -> OP_MARK_COMMENT .)
    INT             reduce using rule 33 (comment -> OP_MARK_COMMENT .)
    DOUBLE          reduce using rule 33 (comment -> OP_MARK_COMMENT .)
    BOOL            reduce using rule 33 (comment -> OP_MARK_COMMENT .)
    CHARACTER       reduce using rule 33 (comment -> OP_MARK_COMMENT .)
    STRING          reduce using rule 33 (comment -> OP_MARK_COMMENT .)
    VARIABLE        reduce using rule 33 (comment -> OP_MARK_COMMENT .)
    IF              reduce using rule 33 (comment -> OP_MARK_COMMENT .)
    OP_EXPR_OPEN_PARENTHESIS reduce using rule 33 (comment -> OP_MARK_COMMENT .)
    LITERAL         reduce using rule 33 (comment -> OP_MARK_COMMENT .)
    NUMERIC         reduce using rule 33 (comment -> OP_MARK_COMMENT .)
    BOOLEAN         reduce using rule 33 (comment -> OP_MARK_COMMENT .)
    $end            reduce using rule 33 (comment -> OP_MARK_COMMENT .)
    ELSE            reduce using rule 33 (comment -> OP_MARK_COMMENT .)


state 12

    (34) declaration -> INT . VARIABLE EOB
    (16) assignment -> INT . VARIABLE OP_ATRI_EQUAL NUMERIC EOB
    (21) assignment -> INT . VARIABLE OP_ATRI_EQUAL VARIABLE EOB
    (26) assignment -> INT . VARIABLE OP_ATRI_EQUAL operation EOB

    VARIABLE        shift and go to state 24


state 13

    (28) assignment -> VARIABLE . OP_ATRI_EQUAL NUMERIC EOB
    (29) assignment -> VARIABLE . OP_ATRI_EQUAL BOOLEAN EOB
    (30) assignment -> VARIABLE . OP_ATRI_EQUAL CHARACTER EOB
    (31) assignment -> VARIABLE . OP_ATRI_EQUAL LITERAL EOB
    (32) assignment -> VARIABLE . OP_ATRI_EQUAL VARIABLE EOB
    (39) operation -> VARIABLE . OP_MATE_PLUS VARIABLE
    (40) operation -> VARIABLE . OP_MATE_MINUS VARIABLE
    (41) operation -> VARIABLE . OP_MATE_TIMES VARIABLE
    (42) operation -> VARIABLE . OP_MATE_DIVISION VARIABLE
    (43) operation -> VARIABLE . OP_MATE_MODULE VARIABLE
    (44) conditional -> VARIABLE . OP_RELA_LESS NUMERIC
    (45) conditional -> VARIABLE . OP_RELA_LESS BOOLEAN
    (46) conditional -> VARIABLE . OP_RELA_LESS LITERAL
    (47) conditional -> VARIABLE . OP_RELA_LESS CHARACTER
    (48) conditional -> VARIABLE . OP_RELA_LESS VARIABLE
    (49) conditional -> VARIABLE . OP_RELA_BIGGER NUMERIC
    (50) conditional -> VARIABLE . OP_RELA_BIGGER BOOLEAN
    (51) conditional -> VARIABLE . OP_RELA_BIGGER LITERAL
    (52) conditional -> VARIABLE . OP_RELA_BIGGER CHARACTER
    (53) conditional -> VARIABLE . OP_RELA_BIGGER VARIABLE
    (54) conditional -> VARIABLE . OP_RELA_LESS_EQUAL NUMERIC
    (55) conditional -> VARIABLE . OP_RELA_LESS_EQUAL BOOLEAN
    (56) conditional -> VARIABLE . OP_RELA_LESS_EQUAL LITERAL
    (57) conditional -> VARIABLE . OP_RELA_LESS_EQUAL CHARACTER
    (58) conditional -> VARIABLE . OP_RELA_LESS_EQUAL VARIABLE
    (59) conditional -> VARIABLE . OP_RELA_BIGGER_EQUAL NUMERIC
    (60) conditional -> VARIABLE . OP_RELA_BIGGER_EQUAL BOOLEAN
    (61) conditional -> VARIABLE . OP_RELA_BIGGER_EQUAL LITERAL
    (62) conditional -> VARIABLE . OP_RELA_BIGGER_EQUAL CHARACTER
    (63) conditional -> VARIABLE . OP_RELA_BIGGER_EQUAL VARIABLE
    (64) conditional -> VARIABLE . OP_RELA_COMPARE NUMERIC
    (65) conditional -> VARIABLE . OP_RELA_COMPARE BOOLEAN
    (66) conditional -> VARIABLE . OP_RELA_COMPARE LITERAL
    (67) conditional -> VARIABLE . OP_RELA_COMPARE CHARACTER
    (68) conditional -> VARIABLE . OP_RELA_COMPARE VARIABLE
    (69) conditional -> VARIABLE . OP_RELA_DIFFERENTIATE NUMERIC
    (70) conditional -> VARIABLE . OP_RELA_DIFFERENTIATE BOOLEAN
    (71) conditional -> VARIABLE . OP_RELA_DIFFERENTIATE LITERAL
    (72) conditional -> VARIABLE . OP_RELA_DIFFERENTIATE CHARACTER
    (73) conditional -> VARIABLE . OP_RELA_DIFFERENTIATE VARIABLE

    OP_ATRI_EQUAL   shift and go to state 25
    OP_MATE_PLUS    shift and go to state 26
    OP_MATE_MINUS   shift and go to state 27
    OP_MATE_TIMES   shift and go to state 28
    OP_MATE_DIVISION shift and go to state 29
    OP_MATE_MODULE  shift and go to state 30
    OP_RELA_LESS    shift and go to state 31
    OP_RELA_BIGGER  shift and go to state 32
    OP_RELA_LESS_EQUAL shift and go to state 33
    OP_RELA_BIGGER_EQUAL shift and go to state 34
    OP_RELA_COMPARE shift and go to state 35
    OP_RELA_DIFFERENTIATE shift and go to state 36


state 14

    (35) declaration -> DOUBLE . VARIABLE EOB
    (17) assignment -> DOUBLE . VARIABLE OP_ATRI_EQUAL NUMERIC EOB
    (22) assignment -> DOUBLE . VARIABLE OP_ATRI_EQUAL VARIABLE EOB
    (27) assignment -> DOUBLE . VARIABLE OP_ATRI_EQUAL operation EOB

    VARIABLE        shift and go to state 37


state 15

    (36) declaration -> BOOL . VARIABLE EOB
    (18) assignment -> BOOL . VARIABLE OP_ATRI_EQUAL BOOLEAN EOB
    (23) assignment -> BOOL . VARIABLE OP_ATRI_EQUAL VARIABLE EOB

    VARIABLE        shift and go to state 38


state 16

    (37) declaration -> CHARACTER . VARIABLE EOB
    (19) assignment -> CHARACTER . VARIABLE OP_ATRI_EQUAL CHAR EOB
    (24) assignment -> CHARACTER . VARIABLE OP_ATRI_EQUAL VARIABLE EOB
    (74) value -> CHARACTER .

  ! shift/reduce conflict for VARIABLE resolved as shift
    VARIABLE        shift and go to state 39
    OP_MARK_COMMENT reduce using rule 74 (value -> CHARACTER .)
    INT             reduce using rule 74 (value -> CHARACTER .)
    DOUBLE          reduce using rule 74 (value -> CHARACTER .)
    BOOL            reduce using rule 74 (value -> CHARACTER .)
    CHARACTER       reduce using rule 74 (value -> CHARACTER .)
    STRING          reduce using rule 74 (value -> CHARACTER .)
    IF              reduce using rule 74 (value -> CHARACTER .)
    OP_EXPR_OPEN_PARENTHESIS reduce using rule 74 (value -> CHARACTER .)
    LITERAL         reduce using rule 74 (value -> CHARACTER .)
    NUMERIC         reduce using rule 74 (value -> CHARACTER .)
    BOOLEAN         reduce using rule 74 (value -> CHARACTER .)
    $end            reduce using rule 74 (value -> CHARACTER .)
    ELSE            reduce using rule 74 (value -> CHARACTER .)

  ! VARIABLE        [ reduce using rule 74 (value -> CHARACTER .) ]


state 17

    (38) declaration -> STRING . VARIABLE EOB
    (20) assignment -> STRING . VARIABLE OP_ATRI_EQUAL LITERAL EOB
    (25) assignment -> STRING . VARIABLE OP_ATRI_EQUAL VARIABLE EOB

    VARIABLE        shift and go to state 40


state 18

    (76) value -> NUMERIC .

    OP_MARK_COMMENT reduce using rule 76 (value -> NUMERIC .)
    INT             reduce using rule 76 (value -> NUMERIC .)
    DOUBLE          reduce using rule 76 (value -> NUMERIC .)
    BOOL            reduce using rule 76 (value -> NUMERIC .)
    CHARACTER       reduce using rule 76 (value -> NUMERIC .)
    STRING          reduce using rule 76 (value -> NUMERIC .)
    VARIABLE        reduce using rule 76 (value -> NUMERIC .)
    IF              reduce using rule 76 (value -> NUMERIC .)
    OP_EXPR_OPEN_PARENTHESIS reduce using rule 76 (value -> NUMERIC .)
    LITERAL         reduce using rule 76 (value -> NUMERIC .)
    NUMERIC         reduce using rule 76 (value -> NUMERIC .)
    BOOLEAN         reduce using rule 76 (value -> NUMERIC .)
    $end            reduce using rule 76 (value -> NUMERIC .)
    OP_EXPR_CLOSE_PARENTHESIS reduce using rule 76 (value -> NUMERIC .)
    ELSE            reduce using rule 76 (value -> NUMERIC .)


state 19

    (77) value -> BOOLEAN .

    OP_MARK_COMMENT reduce using rule 77 (value -> BOOLEAN .)
    INT             reduce using rule 77 (value -> BOOLEAN .)
    DOUBLE          reduce using rule 77 (value -> BOOLEAN .)
    BOOL            reduce using rule 77 (value -> BOOLEAN .)
    CHARACTER       reduce using rule 77 (value -> BOOLEAN .)
    STRING          reduce using rule 77 (value -> BOOLEAN .)
    VARIABLE        reduce using rule 77 (value -> BOOLEAN .)
    IF              reduce using rule 77 (value -> BOOLEAN .)
    OP_EXPR_OPEN_PARENTHESIS reduce using rule 77 (value -> BOOLEAN .)
    LITERAL         reduce using rule 77 (value -> BOOLEAN .)
    NUMERIC         reduce using rule 77 (value -> BOOLEAN .)
    BOOLEAN         reduce using rule 77 (value -> BOOLEAN .)
    $end            reduce using rule 77 (value -> BOOLEAN .)
    OP_EXPR_CLOSE_PARENTHESIS reduce using rule 77 (value -> BOOLEAN .)
    ELSE            reduce using rule 77 (value -> BOOLEAN .)


state 20

    (75) value -> LITERAL .

    OP_MARK_COMMENT reduce using rule 75 (value -> LITERAL .)
    INT             reduce using rule 75 (value -> LITERAL .)
    DOUBLE          reduce using rule 75 (value -> LITERAL .)
    BOOL            reduce using rule 75 (value -> LITERAL .)
    CHARACTER       reduce using rule 75 (value -> LITERAL .)
    STRING          reduce using rule 75 (value -> LITERAL .)
    VARIABLE        reduce using rule 75 (value -> LITERAL .)
    IF              reduce using rule 75 (value -> LITERAL .)
    OP_EXPR_OPEN_PARENTHESIS reduce using rule 75 (value -> LITERAL .)
    LITERAL         reduce using rule 75 (value -> LITERAL .)
    NUMERIC         reduce using rule 75 (value -> LITERAL .)
    BOOLEAN         reduce using rule 75 (value -> LITERAL .)
    $end            reduce using rule 75 (value -> LITERAL .)
    OP_EXPR_CLOSE_PARENTHESIS reduce using rule 75 (value -> LITERAL .)
    ELSE            reduce using rule 75 (value -> LITERAL .)


state 21

    (11) decision -> IF . OP_EXPR_OPEN_PARENTHESIS conditional OP_EXPR_CLOSE_PARENTHESIS OP_EXEC_COLON statement
    (12) decision -> IF . OP_EXPR_OPEN_PARENTHESIS conditional OP_EXPR_CLOSE_PARENTHESIS OP_EXEC_COLON statement ELSE OP_EXEC_COLON statement

    OP_EXPR_OPEN_PARENTHESIS shift and go to state 41


state 22

    (13) expression -> OP_EXPR_OPEN_PARENTHESIS . conditional OP_EXPR_CLOSE_PARENTHESIS
    (14) expression -> OP_EXPR_OPEN_PARENTHESIS . operation OP_EXPR_CLOSE_PARENTHESIS
    (15) expression -> OP_EXPR_OPEN_PARENTHESIS . value OP_EXPR_CLOSE_PARENTHESIS
    (44) conditional -> . VARIABLE OP_RELA_LESS NUMERIC
    (45) conditional -> . VARIABLE OP_RELA_LESS BOOLEAN
    (46) conditional -> . VARIABLE OP_RELA_LESS LITERAL
    (47) conditional -> . VARIABLE OP_RELA_LESS CHARACTER
    (48) conditional -> . VARIABLE OP_RELA_LESS VARIABLE
    (49) conditional -> . VARIABLE OP_RELA_BIGGER NUMERIC
    (50) conditional -> . VARIABLE OP_RELA_BIGGER BOOLEAN
    (51) conditional -> . VARIABLE OP_RELA_BIGGER LITERAL
    (52) conditional -> . VARIABLE OP_RELA_BIGGER CHARACTER
    (53) conditional -> . VARIABLE OP_RELA_BIGGER VARIABLE
    (54) conditional -> . VARIABLE OP_RELA_LESS_EQUAL NUMERIC
    (55) conditional -> . VARIABLE OP_RELA_LESS_EQUAL BOOLEAN
    (56) conditional -> . VARIABLE OP_RELA_LESS_EQUAL LITERAL
    (57) conditional -> . VARIABLE OP_RELA_LESS_EQUAL CHARACTER
    (58) conditional -> . VARIABLE OP_RELA_LESS_EQUAL VARIABLE
    (59) conditional -> . VARIABLE OP_RELA_BIGGER_EQUAL NUMERIC
    (60) conditional -> . VARIABLE OP_RELA_BIGGER_EQUAL BOOLEAN
    (61) conditional -> . VARIABLE OP_RELA_BIGGER_EQUAL LITERAL
    (62) conditional -> . VARIABLE OP_RELA_BIGGER_EQUAL CHARACTER
    (63) conditional -> . VARIABLE OP_RELA_BIGGER_EQUAL VARIABLE
    (64) conditional -> . VARIABLE OP_RELA_COMPARE NUMERIC
    (65) conditional -> . VARIABLE OP_RELA_COMPARE BOOLEAN
    (66) conditional -> . VARIABLE OP_RELA_COMPARE LITERAL
    (67) conditional -> . VARIABLE OP_RELA_COMPARE CHARACTER
    (68) conditional -> . VARIABLE OP_RELA_COMPARE VARIABLE
    (69) conditional -> . VARIABLE OP_RELA_DIFFERENTIATE NUMERIC
    (70) conditional -> . VARIABLE OP_RELA_DIFFERENTIATE BOOLEAN
    (71) conditional -> . VARIABLE OP_RELA_DIFFERENTIATE LITERAL
    (72) conditional -> . VARIABLE OP_RELA_DIFFERENTIATE CHARACTER
    (73) conditional -> . VARIABLE OP_RELA_DIFFERENTIATE VARIABLE
    (39) operation -> . VARIABLE OP_MATE_PLUS VARIABLE
    (40) operation -> . VARIABLE OP_MATE_MINUS VARIABLE
    (41) operation -> . VARIABLE OP_MATE_TIMES VARIABLE
    (42) operation -> . VARIABLE OP_MATE_DIVISION VARIABLE
    (43) operation -> . VARIABLE OP_MATE_MODULE VARIABLE
    (74) value -> . CHARACTER
    (75) value -> . LITERAL
    (76) value -> . NUMERIC
    (77) value -> . BOOLEAN

    VARIABLE        shift and go to state 45
    CHARACTER       shift and go to state 46
    LITERAL         shift and go to state 20
    NUMERIC         shift and go to state 18
    BOOLEAN         shift and go to state 19

    conditional                    shift and go to state 42
    operation                      shift and go to state 43
    value                          shift and go to state 44

state 23

    (1) statements -> statements statement .

    OP_MARK_COMMENT reduce using rule 1 (statements -> statements statement .)
    INT             reduce using rule 1 (statements -> statements statement .)
    DOUBLE          reduce using rule 1 (statements -> statements statement .)
    BOOL            reduce using rule 1 (statements -> statements statement .)
    CHARACTER       reduce using rule 1 (statements -> statements statement .)
    STRING          reduce using rule 1 (statements -> statements statement .)
    VARIABLE        reduce using rule 1 (statements -> statements statement .)
    IF              reduce using rule 1 (statements -> statements statement .)
    OP_EXPR_OPEN_PARENTHESIS reduce using rule 1 (statements -> statements statement .)
    LITERAL         reduce using rule 1 (statements -> statements statement .)
    NUMERIC         reduce using rule 1 (statements -> statements statement .)
    BOOLEAN         reduce using rule 1 (statements -> statements statement .)
    $end            reduce using rule 1 (statements -> statements statement .)


state 24

    (34) declaration -> INT VARIABLE . EOB
    (16) assignment -> INT VARIABLE . OP_ATRI_EQUAL NUMERIC EOB
    (21) assignment -> INT VARIABLE . OP_ATRI_EQUAL VARIABLE EOB
    (26) assignment -> INT VARIABLE . OP_ATRI_EQUAL operation EOB

    EOB             shift and go to state 47
    OP_ATRI_EQUAL   shift and go to state 48


state 25

    (28) assignment -> VARIABLE OP_ATRI_EQUAL . NUMERIC EOB
    (29) assignment -> VARIABLE OP_ATRI_EQUAL . BOOLEAN EOB
    (30) assignment -> VARIABLE OP_ATRI_EQUAL . CHARACTER EOB
    (31) assignment -> VARIABLE OP_ATRI_EQUAL . LITERAL EOB
    (32) assignment -> VARIABLE OP_ATRI_EQUAL . VARIABLE EOB

    NUMERIC         shift and go to state 50
    BOOLEAN         shift and go to state 51
    CHARACTER       shift and go to state 52
    LITERAL         shift and go to state 53
    VARIABLE        shift and go to state 49


state 26

    (39) operation -> VARIABLE OP_MATE_PLUS . VARIABLE

    VARIABLE        shift and go to state 54


state 27

    (40) operation -> VARIABLE OP_MATE_MINUS . VARIABLE

    VARIABLE        shift and go to state 55


state 28

    (41) operation -> VARIABLE OP_MATE_TIMES . VARIABLE

    VARIABLE        shift and go to state 56


state 29

    (42) operation -> VARIABLE OP_MATE_DIVISION . VARIABLE

    VARIABLE        shift and go to state 57


state 30

    (43) operation -> VARIABLE OP_MATE_MODULE . VARIABLE

    VARIABLE        shift and go to state 58


state 31

    (44) conditional -> VARIABLE OP_RELA_LESS . NUMERIC
    (45) conditional -> VARIABLE OP_RELA_LESS . BOOLEAN
    (46) conditional -> VARIABLE OP_RELA_LESS . LITERAL
    (47) conditional -> VARIABLE OP_RELA_LESS . CHARACTER
    (48) conditional -> VARIABLE OP_RELA_LESS . VARIABLE

    NUMERIC         shift and go to state 60
    BOOLEAN         shift and go to state 61
    LITERAL         shift and go to state 62
    CHARACTER       shift and go to state 63
    VARIABLE        shift and go to state 59


state 32

    (49) conditional -> VARIABLE OP_RELA_BIGGER . NUMERIC
    (50) conditional -> VARIABLE OP_RELA_BIGGER . BOOLEAN
    (51) conditional -> VARIABLE OP_RELA_BIGGER . LITERAL
    (52) conditional -> VARIABLE OP_RELA_BIGGER . CHARACTER
    (53) conditional -> VARIABLE OP_RELA_BIGGER . VARIABLE

    NUMERIC         shift and go to state 65
    BOOLEAN         shift and go to state 66
    LITERAL         shift and go to state 67
    CHARACTER       shift and go to state 68
    VARIABLE        shift and go to state 64


state 33

    (54) conditional -> VARIABLE OP_RELA_LESS_EQUAL . NUMERIC
    (55) conditional -> VARIABLE OP_RELA_LESS_EQUAL . BOOLEAN
    (56) conditional -> VARIABLE OP_RELA_LESS_EQUAL . LITERAL
    (57) conditional -> VARIABLE OP_RELA_LESS_EQUAL . CHARACTER
    (58) conditional -> VARIABLE OP_RELA_LESS_EQUAL . VARIABLE

    NUMERIC         shift and go to state 70
    BOOLEAN         shift and go to state 71
    LITERAL         shift and go to state 72
    CHARACTER       shift and go to state 73
    VARIABLE        shift and go to state 69


state 34

    (59) conditional -> VARIABLE OP_RELA_BIGGER_EQUAL . NUMERIC
    (60) conditional -> VARIABLE OP_RELA_BIGGER_EQUAL . BOOLEAN
    (61) conditional -> VARIABLE OP_RELA_BIGGER_EQUAL . LITERAL
    (62) conditional -> VARIABLE OP_RELA_BIGGER_EQUAL . CHARACTER
    (63) conditional -> VARIABLE OP_RELA_BIGGER_EQUAL . VARIABLE

    NUMERIC         shift and go to state 75
    BOOLEAN         shift and go to state 76
    LITERAL         shift and go to state 77
    CHARACTER       shift and go to state 78
    VARIABLE        shift and go to state 74


state 35

    (64) conditional -> VARIABLE OP_RELA_COMPARE . NUMERIC
    (65) conditional -> VARIABLE OP_RELA_COMPARE . BOOLEAN
    (66) conditional -> VARIABLE OP_RELA_COMPARE . LITERAL
    (67) conditional -> VARIABLE OP_RELA_COMPARE . CHARACTER
    (68) conditional -> VARIABLE OP_RELA_COMPARE . VARIABLE

    NUMERIC         shift and go to state 80
    BOOLEAN         shift and go to state 81
    LITERAL         shift and go to state 82
    CHARACTER       shift and go to state 83
    VARIABLE        shift and go to state 79


state 36

    (69) conditional -> VARIABLE OP_RELA_DIFFERENTIATE . NUMERIC
    (70) conditional -> VARIABLE OP_RELA_DIFFERENTIATE . BOOLEAN
    (71) conditional -> VARIABLE OP_RELA_DIFFERENTIATE . LITERAL
    (72) conditional -> VARIABLE OP_RELA_DIFFERENTIATE . CHARACTER
    (73) conditional -> VARIABLE OP_RELA_DIFFERENTIATE . VARIABLE

    NUMERIC         shift and go to state 85
    BOOLEAN         shift and go to state 86
    LITERAL         shift and go to state 87
    CHARACTER       shift and go to state 88
    VARIABLE        shift and go to state 84


state 37

    (35) declaration -> DOUBLE VARIABLE . EOB
    (17) assignment -> DOUBLE VARIABLE . OP_ATRI_EQUAL NUMERIC EOB
    (22) assignment -> DOUBLE VARIABLE . OP_ATRI_EQUAL VARIABLE EOB
    (27) assignment -> DOUBLE VARIABLE . OP_ATRI_EQUAL operation EOB

    EOB             shift and go to state 89
    OP_ATRI_EQUAL   shift and go to state 90


state 38

    (36) declaration -> BOOL VARIABLE . EOB
    (18) assignment -> BOOL VARIABLE . OP_ATRI_EQUAL BOOLEAN EOB
    (23) assignment -> BOOL VARIABLE . OP_ATRI_EQUAL VARIABLE EOB

    EOB             shift and go to state 91
    OP_ATRI_EQUAL   shift and go to state 92


state 39

    (37) declaration -> CHARACTER VARIABLE . EOB
    (19) assignment -> CHARACTER VARIABLE . OP_ATRI_EQUAL CHAR EOB
    (24) assignment -> CHARACTER VARIABLE . OP_ATRI_EQUAL VARIABLE EOB

    EOB             shift and go to state 93
    OP_ATRI_EQUAL   shift and go to state 94


state 40

    (38) declaration -> STRING VARIABLE . EOB
    (20) assignment -> STRING VARIABLE . OP_ATRI_EQUAL LITERAL EOB
    (25) assignment -> STRING VARIABLE . OP_ATRI_EQUAL VARIABLE EOB

    EOB             shift and go to state 95
    OP_ATRI_EQUAL   shift and go to state 96


state 41

    (11) decision -> IF OP_EXPR_OPEN_PARENTHESIS . conditional OP_EXPR_CLOSE_PARENTHESIS OP_EXEC_COLON statement
    (12) decision -> IF OP_EXPR_OPEN_PARENTHESIS . conditional OP_EXPR_CLOSE_PARENTHESIS OP_EXEC_COLON statement ELSE OP_EXEC_COLON statement
    (44) conditional -> . VARIABLE OP_RELA_LESS NUMERIC
    (45) conditional -> . VARIABLE OP_RELA_LESS BOOLEAN
    (46) conditional -> . VARIABLE OP_RELA_LESS LITERAL
    (47) conditional -> . VARIABLE OP_RELA_LESS CHARACTER
    (48) conditional -> . VARIABLE OP_RELA_LESS VARIABLE
    (49) conditional -> . VARIABLE OP_RELA_BIGGER NUMERIC
    (50) conditional -> . VARIABLE OP_RELA_BIGGER BOOLEAN
    (51) conditional -> . VARIABLE OP_RELA_BIGGER LITERAL
    (52) conditional -> . VARIABLE OP_RELA_BIGGER CHARACTER
    (53) conditional -> . VARIABLE OP_RELA_BIGGER VARIABLE
    (54) conditional -> . VARIABLE OP_RELA_LESS_EQUAL NUMERIC
    (55) conditional -> . VARIABLE OP_RELA_LESS_EQUAL BOOLEAN
    (56) conditional -> . VARIABLE OP_RELA_LESS_EQUAL LITERAL
    (57) conditional -> . VARIABLE OP_RELA_LESS_EQUAL CHARACTER
    (58) conditional -> . VARIABLE OP_RELA_LESS_EQUAL VARIABLE
    (59) conditional -> . VARIABLE OP_RELA_BIGGER_EQUAL NUMERIC
    (60) conditional -> . VARIABLE OP_RELA_BIGGER_EQUAL BOOLEAN
    (61) conditional -> . VARIABLE OP_RELA_BIGGER_EQUAL LITERAL
    (62) conditional -> . VARIABLE OP_RELA_BIGGER_EQUAL CHARACTER
    (63) conditional -> . VARIABLE OP_RELA_BIGGER_EQUAL VARIABLE
    (64) conditional -> . VARIABLE OP_RELA_COMPARE NUMERIC
    (65) conditional -> . VARIABLE OP_RELA_COMPARE BOOLEAN
    (66) conditional -> . VARIABLE OP_RELA_COMPARE LITERAL
    (67) conditional -> . VARIABLE OP_RELA_COMPARE CHARACTER
    (68) conditional -> . VARIABLE OP_RELA_COMPARE VARIABLE
    (69) conditional -> . VARIABLE OP_RELA_DIFFERENTIATE NUMERIC
    (70) conditional -> . VARIABLE OP_RELA_DIFFERENTIATE BOOLEAN
    (71) conditional -> . VARIABLE OP_RELA_DIFFERENTIATE LITERAL
    (72) conditional -> . VARIABLE OP_RELA_DIFFERENTIATE CHARACTER
    (73) conditional -> . VARIABLE OP_RELA_DIFFERENTIATE VARIABLE

    VARIABLE        shift and go to state 98

    conditional                    shift and go to state 97

state 42

    (13) expression -> OP_EXPR_OPEN_PARENTHESIS conditional . OP_EXPR_CLOSE_PARENTHESIS

    OP_EXPR_CLOSE_PARENTHESIS shift and go to state 99


state 43

    (14) expression -> OP_EXPR_OPEN_PARENTHESIS operation . OP_EXPR_CLOSE_PARENTHESIS

    OP_EXPR_CLOSE_PARENTHESIS shift and go to state 100


state 44

    (15) expression -> OP_EXPR_OPEN_PARENTHESIS value . OP_EXPR_CLOSE_PARENTHESIS

    OP_EXPR_CLOSE_PARENTHESIS shift and go to state 101


state 45

    (44) conditional -> VARIABLE . OP_RELA_LESS NUMERIC
    (45) conditional -> VARIABLE . OP_RELA_LESS BOOLEAN
    (46) conditional -> VARIABLE . OP_RELA_LESS LITERAL
    (47) conditional -> VARIABLE . OP_RELA_LESS CHARACTER
    (48) conditional -> VARIABLE . OP_RELA_LESS VARIABLE
    (49) conditional -> VARIABLE . OP_RELA_BIGGER NUMERIC
    (50) conditional -> VARIABLE . OP_RELA_BIGGER BOOLEAN
    (51) conditional -> VARIABLE . OP_RELA_BIGGER LITERAL
    (52) conditional -> VARIABLE . OP_RELA_BIGGER CHARACTER
    (53) conditional -> VARIABLE . OP_RELA_BIGGER VARIABLE
    (54) conditional -> VARIABLE . OP_RELA_LESS_EQUAL NUMERIC
    (55) conditional -> VARIABLE . OP_RELA_LESS_EQUAL BOOLEAN
    (56) conditional -> VARIABLE . OP_RELA_LESS_EQUAL LITERAL
    (57) conditional -> VARIABLE . OP_RELA_LESS_EQUAL CHARACTER
    (58) conditional -> VARIABLE . OP_RELA_LESS_EQUAL VARIABLE
    (59) conditional -> VARIABLE . OP_RELA_BIGGER_EQUAL NUMERIC
    (60) conditional -> VARIABLE . OP_RELA_BIGGER_EQUAL BOOLEAN
    (61) conditional -> VARIABLE . OP_RELA_BIGGER_EQUAL LITERAL
    (62) conditional -> VARIABLE . OP_RELA_BIGGER_EQUAL CHARACTER
    (63) conditional -> VARIABLE . OP_RELA_BIGGER_EQUAL VARIABLE
    (64) conditional -> VARIABLE . OP_RELA_COMPARE NUMERIC
    (65) conditional -> VARIABLE . OP_RELA_COMPARE BOOLEAN
    (66) conditional -> VARIABLE . OP_RELA_COMPARE LITERAL
    (67) conditional -> VARIABLE . OP_RELA_COMPARE CHARACTER
    (68) conditional -> VARIABLE . OP_RELA_COMPARE VARIABLE
    (69) conditional -> VARIABLE . OP_RELA_DIFFERENTIATE NUMERIC
    (70) conditional -> VARIABLE . OP_RELA_DIFFERENTIATE BOOLEAN
    (71) conditional -> VARIABLE . OP_RELA_DIFFERENTIATE LITERAL
    (72) conditional -> VARIABLE . OP_RELA_DIFFERENTIATE CHARACTER
    (73) conditional -> VARIABLE . OP_RELA_DIFFERENTIATE VARIABLE
    (39) operation -> VARIABLE . OP_MATE_PLUS VARIABLE
    (40) operation -> VARIABLE . OP_MATE_MINUS VARIABLE
    (41) operation -> VARIABLE . OP_MATE_TIMES VARIABLE
    (42) operation -> VARIABLE . OP_MATE_DIVISION VARIABLE
    (43) operation -> VARIABLE . OP_MATE_MODULE VARIABLE

    OP_RELA_LESS    shift and go to state 31
    OP_RELA_BIGGER  shift and go to state 32
    OP_RELA_LESS_EQUAL shift and go to state 33
    OP_RELA_BIGGER_EQUAL shift and go to state 34
    OP_RELA_COMPARE shift and go to state 35
    OP_RELA_DIFFERENTIATE shift and go to state 36
    OP_MATE_PLUS    shift and go to state 26
    OP_MATE_MINUS   shift and go to state 27
    OP_MATE_TIMES   shift and go to state 28
    OP_MATE_DIVISION shift and go to state 29
    OP_MATE_MODULE  shift and go to state 30


state 46

    (74) value -> CHARACTER .

    OP_EXPR_CLOSE_PARENTHESIS reduce using rule 74 (value -> CHARACTER .)


state 47

    (34) declaration -> INT VARIABLE EOB .

    OP_MARK_COMMENT reduce using rule 34 (declaration -> INT VARIABLE EOB .)
    INT             reduce using rule 34 (declaration -> INT VARIABLE EOB .)
    DOUBLE          reduce using rule 34 (declaration -> INT VARIABLE EOB .)
    BOOL            reduce using rule 34 (declaration -> INT VARIABLE EOB .)
    CHARACTER       reduce using rule 34 (declaration -> INT VARIABLE EOB .)
    STRING          reduce using rule 34 (declaration -> INT VARIABLE EOB .)
    VARIABLE        reduce using rule 34 (declaration -> INT VARIABLE EOB .)
    IF              reduce using rule 34 (declaration -> INT VARIABLE EOB .)
    OP_EXPR_OPEN_PARENTHESIS reduce using rule 34 (declaration -> INT VARIABLE EOB .)
    LITERAL         reduce using rule 34 (declaration -> INT VARIABLE EOB .)
    NUMERIC         reduce using rule 34 (declaration -> INT VARIABLE EOB .)
    BOOLEAN         reduce using rule 34 (declaration -> INT VARIABLE EOB .)
    $end            reduce using rule 34 (declaration -> INT VARIABLE EOB .)
    ELSE            reduce using rule 34 (declaration -> INT VARIABLE EOB .)


state 48

    (16) assignment -> INT VARIABLE OP_ATRI_EQUAL . NUMERIC EOB
    (21) assignment -> INT VARIABLE OP_ATRI_EQUAL . VARIABLE EOB
    (26) assignment -> INT VARIABLE OP_ATRI_EQUAL . operation EOB
    (39) operation -> . VARIABLE OP_MATE_PLUS VARIABLE
    (40) operation -> . VARIABLE OP_MATE_MINUS VARIABLE
    (41) operation -> . VARIABLE OP_MATE_TIMES VARIABLE
    (42) operation -> . VARIABLE OP_MATE_DIVISION VARIABLE
    (43) operation -> . VARIABLE OP_MATE_MODULE VARIABLE

    NUMERIC         shift and go to state 103
    VARIABLE        shift and go to state 102

    operation                      shift and go to state 104

state 49

    (32) assignment -> VARIABLE OP_ATRI_EQUAL VARIABLE . EOB

    EOB             shift and go to state 105


state 50

    (28) assignment -> VARIABLE OP_ATRI_EQUAL NUMERIC . EOB

    EOB             shift and go to state 106


state 51

    (29) assignment -> VARIABLE OP_ATRI_EQUAL BOOLEAN . EOB

    EOB             shift and go to state 107


state 52

    (30) assignment -> VARIABLE OP_ATRI_EQUAL CHARACTER . EOB

    EOB             shift and go to state 108


state 53

    (31) assignment -> VARIABLE OP_ATRI_EQUAL LITERAL . EOB

    EOB             shift and go to state 109


state 54

    (39) operation -> VARIABLE OP_MATE_PLUS VARIABLE .

    OP_MARK_COMMENT reduce using rule 39 (operation -> VARIABLE OP_MATE_PLUS VARIABLE .)
    INT             reduce using rule 39 (operation -> VARIABLE OP_MATE_PLUS VARIABLE .)
    DOUBLE          reduce using rule 39 (operation -> VARIABLE OP_MATE_PLUS VARIABLE .)
    BOOL            reduce using rule 39 (operation -> VARIABLE OP_MATE_PLUS VARIABLE .)
    CHARACTER       reduce using rule 39 (operation -> VARIABLE OP_MATE_PLUS VARIABLE .)
    STRING          reduce using rule 39 (operation -> VARIABLE OP_MATE_PLUS VARIABLE .)
    VARIABLE        reduce using rule 39 (operation -> VARIABLE OP_MATE_PLUS VARIABLE .)
    IF              reduce using rule 39 (operation -> VARIABLE OP_MATE_PLUS VARIABLE .)
    OP_EXPR_OPEN_PARENTHESIS reduce using rule 39 (operation -> VARIABLE OP_MATE_PLUS VARIABLE .)
    LITERAL         reduce using rule 39 (operation -> VARIABLE OP_MATE_PLUS VARIABLE .)
    NUMERIC         reduce using rule 39 (operation -> VARIABLE OP_MATE_PLUS VARIABLE .)
    BOOLEAN         reduce using rule 39 (operation -> VARIABLE OP_MATE_PLUS VARIABLE .)
    $end            reduce using rule 39 (operation -> VARIABLE OP_MATE_PLUS VARIABLE .)
    OP_EXPR_CLOSE_PARENTHESIS reduce using rule 39 (operation -> VARIABLE OP_MATE_PLUS VARIABLE .)
    EOB             reduce using rule 39 (operation -> VARIABLE OP_MATE_PLUS VARIABLE .)
    ELSE            reduce using rule 39 (operation -> VARIABLE OP_MATE_PLUS VARIABLE .)


state 55

    (40) operation -> VARIABLE OP_MATE_MINUS VARIABLE .

    OP_MARK_COMMENT reduce using rule 40 (operation -> VARIABLE OP_MATE_MINUS VARIABLE .)
    INT             reduce using rule 40 (operation -> VARIABLE OP_MATE_MINUS VARIABLE .)
    DOUBLE          reduce using rule 40 (operation -> VARIABLE OP_MATE_MINUS VARIABLE .)
    BOOL            reduce using rule 40 (operation -> VARIABLE OP_MATE_MINUS VARIABLE .)
    CHARACTER       reduce using rule 40 (operation -> VARIABLE OP_MATE_MINUS VARIABLE .)
    STRING          reduce using rule 40 (operation -> VARIABLE OP_MATE_MINUS VARIABLE .)
    VARIABLE        reduce using rule 40 (operation -> VARIABLE OP_MATE_MINUS VARIABLE .)
    IF              reduce using rule 40 (operation -> VARIABLE OP_MATE_MINUS VARIABLE .)
    OP_EXPR_OPEN_PARENTHESIS reduce using rule 40 (operation -> VARIABLE OP_MATE_MINUS VARIABLE .)
    LITERAL         reduce using rule 40 (operation -> VARIABLE OP_MATE_MINUS VARIABLE .)
    NUMERIC         reduce using rule 40 (operation -> VARIABLE OP_MATE_MINUS VARIABLE .)
    BOOLEAN         reduce using rule 40 (operation -> VARIABLE OP_MATE_MINUS VARIABLE .)
    $end            reduce using rule 40 (operation -> VARIABLE OP_MATE_MINUS VARIABLE .)
    OP_EXPR_CLOSE_PARENTHESIS reduce using rule 40 (operation -> VARIABLE OP_MATE_MINUS VARIABLE .)
    EOB             reduce using rule 40 (operation -> VARIABLE OP_MATE_MINUS VARIABLE .)
    ELSE            reduce using rule 40 (operation -> VARIABLE OP_MATE_MINUS VARIABLE .)


state 56

    (41) operation -> VARIABLE OP_MATE_TIMES VARIABLE .

    OP_MARK_COMMENT reduce using rule 41 (operation -> VARIABLE OP_MATE_TIMES VARIABLE .)
    INT             reduce using rule 41 (operation -> VARIABLE OP_MATE_TIMES VARIABLE .)
    DOUBLE          reduce using rule 41 (operation -> VARIABLE OP_MATE_TIMES VARIABLE .)
    BOOL            reduce using rule 41 (operation -> VARIABLE OP_MATE_TIMES VARIABLE .)
    CHARACTER       reduce using rule 41 (operation -> VARIABLE OP_MATE_TIMES VARIABLE .)
    STRING          reduce using rule 41 (operation -> VARIABLE OP_MATE_TIMES VARIABLE .)
    VARIABLE        reduce using rule 41 (operation -> VARIABLE OP_MATE_TIMES VARIABLE .)
    IF              reduce using rule 41 (operation -> VARIABLE OP_MATE_TIMES VARIABLE .)
    OP_EXPR_OPEN_PARENTHESIS reduce using rule 41 (operation -> VARIABLE OP_MATE_TIMES VARIABLE .)
    LITERAL         reduce using rule 41 (operation -> VARIABLE OP_MATE_TIMES VARIABLE .)
    NUMERIC         reduce using rule 41 (operation -> VARIABLE OP_MATE_TIMES VARIABLE .)
    BOOLEAN         reduce using rule 41 (operation -> VARIABLE OP_MATE_TIMES VARIABLE .)
    $end            reduce using rule 41 (operation -> VARIABLE OP_MATE_TIMES VARIABLE .)
    OP_EXPR_CLOSE_PARENTHESIS reduce using rule 41 (operation -> VARIABLE OP_MATE_TIMES VARIABLE .)
    EOB             reduce using rule 41 (operation -> VARIABLE OP_MATE_TIMES VARIABLE .)
    ELSE            reduce using rule 41 (operation -> VARIABLE OP_MATE_TIMES VARIABLE .)


state 57

    (42) operation -> VARIABLE OP_MATE_DIVISION VARIABLE .

    OP_MARK_COMMENT reduce using rule 42 (operation -> VARIABLE OP_MATE_DIVISION VARIABLE .)
    INT             reduce using rule 42 (operation -> VARIABLE OP_MATE_DIVISION VARIABLE .)
    DOUBLE          reduce using rule 42 (operation -> VARIABLE OP_MATE_DIVISION VARIABLE .)
    BOOL            reduce using rule 42 (operation -> VARIABLE OP_MATE_DIVISION VARIABLE .)
    CHARACTER       reduce using rule 42 (operation -> VARIABLE OP_MATE_DIVISION VARIABLE .)
    STRING          reduce using rule 42 (operation -> VARIABLE OP_MATE_DIVISION VARIABLE .)
    VARIABLE        reduce using rule 42 (operation -> VARIABLE OP_MATE_DIVISION VARIABLE .)
    IF              reduce using rule 42 (operation -> VARIABLE OP_MATE_DIVISION VARIABLE .)
    OP_EXPR_OPEN_PARENTHESIS reduce using rule 42 (operation -> VARIABLE OP_MATE_DIVISION VARIABLE .)
    LITERAL         reduce using rule 42 (operation -> VARIABLE OP_MATE_DIVISION VARIABLE .)
    NUMERIC         reduce using rule 42 (operation -> VARIABLE OP_MATE_DIVISION VARIABLE .)
    BOOLEAN         reduce using rule 42 (operation -> VARIABLE OP_MATE_DIVISION VARIABLE .)
    $end            reduce using rule 42 (operation -> VARIABLE OP_MATE_DIVISION VARIABLE .)
    OP_EXPR_CLOSE_PARENTHESIS reduce using rule 42 (operation -> VARIABLE OP_MATE_DIVISION VARIABLE .)
    EOB             reduce using rule 42 (operation -> VARIABLE OP_MATE_DIVISION VARIABLE .)
    ELSE            reduce using rule 42 (operation -> VARIABLE OP_MATE_DIVISION VARIABLE .)


state 58

    (43) operation -> VARIABLE OP_MATE_MODULE VARIABLE .

    OP_MARK_COMMENT reduce using rule 43 (operation -> VARIABLE OP_MATE_MODULE VARIABLE .)
    INT             reduce using rule 43 (operation -> VARIABLE OP_MATE_MODULE VARIABLE .)
    DOUBLE          reduce using rule 43 (operation -> VARIABLE OP_MATE_MODULE VARIABLE .)
    BOOL            reduce using rule 43 (operation -> VARIABLE OP_MATE_MODULE VARIABLE .)
    CHARACTER       reduce using rule 43 (operation -> VARIABLE OP_MATE_MODULE VARIABLE .)
    STRING          reduce using rule 43 (operation -> VARIABLE OP_MATE_MODULE VARIABLE .)
    VARIABLE        reduce using rule 43 (operation -> VARIABLE OP_MATE_MODULE VARIABLE .)
    IF              reduce using rule 43 (operation -> VARIABLE OP_MATE_MODULE VARIABLE .)
    OP_EXPR_OPEN_PARENTHESIS reduce using rule 43 (operation -> VARIABLE OP_MATE_MODULE VARIABLE .)
    LITERAL         reduce using rule 43 (operation -> VARIABLE OP_MATE_MODULE VARIABLE .)
    NUMERIC         reduce using rule 43 (operation -> VARIABLE OP_MATE_MODULE VARIABLE .)
    BOOLEAN         reduce using rule 43 (operation -> VARIABLE OP_MATE_MODULE VARIABLE .)
    $end            reduce using rule 43 (operation -> VARIABLE OP_MATE_MODULE VARIABLE .)
    OP_EXPR_CLOSE_PARENTHESIS reduce using rule 43 (operation -> VARIABLE OP_MATE_MODULE VARIABLE .)
    EOB             reduce using rule 43 (operation -> VARIABLE OP_MATE_MODULE VARIABLE .)
    ELSE            reduce using rule 43 (operation -> VARIABLE OP_MATE_MODULE VARIABLE .)


state 59

    (48) conditional -> VARIABLE OP_RELA_LESS VARIABLE .

    OP_MARK_COMMENT reduce using rule 48 (conditional -> VARIABLE OP_RELA_LESS VARIABLE .)
    INT             reduce using rule 48 (conditional -> VARIABLE OP_RELA_LESS VARIABLE .)
    DOUBLE          reduce using rule 48 (conditional -> VARIABLE OP_RELA_LESS VARIABLE .)
    BOOL            reduce using rule 48 (conditional -> VARIABLE OP_RELA_LESS VARIABLE .)
    CHARACTER       reduce using rule 48 (conditional -> VARIABLE OP_RELA_LESS VARIABLE .)
    STRING          reduce using rule 48 (conditional -> VARIABLE OP_RELA_LESS VARIABLE .)
    VARIABLE        reduce using rule 48 (conditional -> VARIABLE OP_RELA_LESS VARIABLE .)
    IF              reduce using rule 48 (conditional -> VARIABLE OP_RELA_LESS VARIABLE .)
    OP_EXPR_OPEN_PARENTHESIS reduce using rule 48 (conditional -> VARIABLE OP_RELA_LESS VARIABLE .)
    LITERAL         reduce using rule 48 (conditional -> VARIABLE OP_RELA_LESS VARIABLE .)
    NUMERIC         reduce using rule 48 (conditional -> VARIABLE OP_RELA_LESS VARIABLE .)
    BOOLEAN         reduce using rule 48 (conditional -> VARIABLE OP_RELA_LESS VARIABLE .)
    $end            reduce using rule 48 (conditional -> VARIABLE OP_RELA_LESS VARIABLE .)
    OP_EXPR_CLOSE_PARENTHESIS reduce using rule 48 (conditional -> VARIABLE OP_RELA_LESS VARIABLE .)
    ELSE            reduce using rule 48 (conditional -> VARIABLE OP_RELA_LESS VARIABLE .)


state 60

    (44) conditional -> VARIABLE OP_RELA_LESS NUMERIC .

    OP_MARK_COMMENT reduce using rule 44 (conditional -> VARIABLE OP_RELA_LESS NUMERIC .)
    INT             reduce using rule 44 (conditional -> VARIABLE OP_RELA_LESS NUMERIC .)
    DOUBLE          reduce using rule 44 (conditional -> VARIABLE OP_RELA_LESS NUMERIC .)
    BOOL            reduce using rule 44 (conditional -> VARIABLE OP_RELA_LESS NUMERIC .)
    CHARACTER       reduce using rule 44 (conditional -> VARIABLE OP_RELA_LESS NUMERIC .)
    STRING          reduce using rule 44 (conditional -> VARIABLE OP_RELA_LESS NUMERIC .)
    VARIABLE        reduce using rule 44 (conditional -> VARIABLE OP_RELA_LESS NUMERIC .)
    IF              reduce using rule 44 (conditional -> VARIABLE OP_RELA_LESS NUMERIC .)
    OP_EXPR_OPEN_PARENTHESIS reduce using rule 44 (conditional -> VARIABLE OP_RELA_LESS NUMERIC .)
    LITERAL         reduce using rule 44 (conditional -> VARIABLE OP_RELA_LESS NUMERIC .)
    NUMERIC         reduce using rule 44 (conditional -> VARIABLE OP_RELA_LESS NUMERIC .)
    BOOLEAN         reduce using rule 44 (conditional -> VARIABLE OP_RELA_LESS NUMERIC .)
    $end            reduce using rule 44 (conditional -> VARIABLE OP_RELA_LESS NUMERIC .)
    OP_EXPR_CLOSE_PARENTHESIS reduce using rule 44 (conditional -> VARIABLE OP_RELA_LESS NUMERIC .)
    ELSE            reduce using rule 44 (conditional -> VARIABLE OP_RELA_LESS NUMERIC .)


state 61

    (45) conditional -> VARIABLE OP_RELA_LESS BOOLEAN .

    OP_MARK_COMMENT reduce using rule 45 (conditional -> VARIABLE OP_RELA_LESS BOOLEAN .)
    INT             reduce using rule 45 (conditional -> VARIABLE OP_RELA_LESS BOOLEAN .)
    DOUBLE          reduce using rule 45 (conditional -> VARIABLE OP_RELA_LESS BOOLEAN .)
    BOOL            reduce using rule 45 (conditional -> VARIABLE OP_RELA_LESS BOOLEAN .)
    CHARACTER       reduce using rule 45 (conditional -> VARIABLE OP_RELA_LESS BOOLEAN .)
    STRING          reduce using rule 45 (conditional -> VARIABLE OP_RELA_LESS BOOLEAN .)
    VARIABLE        reduce using rule 45 (conditional -> VARIABLE OP_RELA_LESS BOOLEAN .)
    IF              reduce using rule 45 (conditional -> VARIABLE OP_RELA_LESS BOOLEAN .)
    OP_EXPR_OPEN_PARENTHESIS reduce using rule 45 (conditional -> VARIABLE OP_RELA_LESS BOOLEAN .)
    LITERAL         reduce using rule 45 (conditional -> VARIABLE OP_RELA_LESS BOOLEAN .)
    NUMERIC         reduce using rule 45 (conditional -> VARIABLE OP_RELA_LESS BOOLEAN .)
    BOOLEAN         reduce using rule 45 (conditional -> VARIABLE OP_RELA_LESS BOOLEAN .)
    $end            reduce using rule 45 (conditional -> VARIABLE OP_RELA_LESS BOOLEAN .)
    OP_EXPR_CLOSE_PARENTHESIS reduce using rule 45 (conditional -> VARIABLE OP_RELA_LESS BOOLEAN .)
    ELSE            reduce using rule 45 (conditional -> VARIABLE OP_RELA_LESS BOOLEAN .)


state 62

    (46) conditional -> VARIABLE OP_RELA_LESS LITERAL .

    OP_MARK_COMMENT reduce using rule 46 (conditional -> VARIABLE OP_RELA_LESS LITERAL .)
    INT             reduce using rule 46 (conditional -> VARIABLE OP_RELA_LESS LITERAL .)
    DOUBLE          reduce using rule 46 (conditional -> VARIABLE OP_RELA_LESS LITERAL .)
    BOOL            reduce using rule 46 (conditional -> VARIABLE OP_RELA_LESS LITERAL .)
    CHARACTER       reduce using rule 46 (conditional -> VARIABLE OP_RELA_LESS LITERAL .)
    STRING          reduce using rule 46 (conditional -> VARIABLE OP_RELA_LESS LITERAL .)
    VARIABLE        reduce using rule 46 (conditional -> VARIABLE OP_RELA_LESS LITERAL .)
    IF              reduce using rule 46 (conditional -> VARIABLE OP_RELA_LESS LITERAL .)
    OP_EXPR_OPEN_PARENTHESIS reduce using rule 46 (conditional -> VARIABLE OP_RELA_LESS LITERAL .)
    LITERAL         reduce using rule 46 (conditional -> VARIABLE OP_RELA_LESS LITERAL .)
    NUMERIC         reduce using rule 46 (conditional -> VARIABLE OP_RELA_LESS LITERAL .)
    BOOLEAN         reduce using rule 46 (conditional -> VARIABLE OP_RELA_LESS LITERAL .)
    $end            reduce using rule 46 (conditional -> VARIABLE OP_RELA_LESS LITERAL .)
    OP_EXPR_CLOSE_PARENTHESIS reduce using rule 46 (conditional -> VARIABLE OP_RELA_LESS LITERAL .)
    ELSE            reduce using rule 46 (conditional -> VARIABLE OP_RELA_LESS LITERAL .)


state 63

    (47) conditional -> VARIABLE OP_RELA_LESS CHARACTER .

    OP_MARK_COMMENT reduce using rule 47 (conditional -> VARIABLE OP_RELA_LESS CHARACTER .)
    INT             reduce using rule 47 (conditional -> VARIABLE OP_RELA_LESS CHARACTER .)
    DOUBLE          reduce using rule 47 (conditional -> VARIABLE OP_RELA_LESS CHARACTER .)
    BOOL            reduce using rule 47 (conditional -> VARIABLE OP_RELA_LESS CHARACTER .)
    CHARACTER       reduce using rule 47 (conditional -> VARIABLE OP_RELA_LESS CHARACTER .)
    STRING          reduce using rule 47 (conditional -> VARIABLE OP_RELA_LESS CHARACTER .)
    VARIABLE        reduce using rule 47 (conditional -> VARIABLE OP_RELA_LESS CHARACTER .)
    IF              reduce using rule 47 (conditional -> VARIABLE OP_RELA_LESS CHARACTER .)
    OP_EXPR_OPEN_PARENTHESIS reduce using rule 47 (conditional -> VARIABLE OP_RELA_LESS CHARACTER .)
    LITERAL         reduce using rule 47 (conditional -> VARIABLE OP_RELA_LESS CHARACTER .)
    NUMERIC         reduce using rule 47 (conditional -> VARIABLE OP_RELA_LESS CHARACTER .)
    BOOLEAN         reduce using rule 47 (conditional -> VARIABLE OP_RELA_LESS CHARACTER .)
    $end            reduce using rule 47 (conditional -> VARIABLE OP_RELA_LESS CHARACTER .)
    OP_EXPR_CLOSE_PARENTHESIS reduce using rule 47 (conditional -> VARIABLE OP_RELA_LESS CHARACTER .)
    ELSE            reduce using rule 47 (conditional -> VARIABLE OP_RELA_LESS CHARACTER .)


state 64

    (53) conditional -> VARIABLE OP_RELA_BIGGER VARIABLE .

    OP_MARK_COMMENT reduce using rule 53 (conditional -> VARIABLE OP_RELA_BIGGER VARIABLE .)
    INT             reduce using rule 53 (conditional -> VARIABLE OP_RELA_BIGGER VARIABLE .)
    DOUBLE          reduce using rule 53 (conditional -> VARIABLE OP_RELA_BIGGER VARIABLE .)
    BOOL            reduce using rule 53 (conditional -> VARIABLE OP_RELA_BIGGER VARIABLE .)
    CHARACTER       reduce using rule 53 (conditional -> VARIABLE OP_RELA_BIGGER VARIABLE .)
    STRING          reduce using rule 53 (conditional -> VARIABLE OP_RELA_BIGGER VARIABLE .)
    VARIABLE        reduce using rule 53 (conditional -> VARIABLE OP_RELA_BIGGER VARIABLE .)
    IF              reduce using rule 53 (conditional -> VARIABLE OP_RELA_BIGGER VARIABLE .)
    OP_EXPR_OPEN_PARENTHESIS reduce using rule 53 (conditional -> VARIABLE OP_RELA_BIGGER VARIABLE .)
    LITERAL         reduce using rule 53 (conditional -> VARIABLE OP_RELA_BIGGER VARIABLE .)
    NUMERIC         reduce using rule 53 (conditional -> VARIABLE OP_RELA_BIGGER VARIABLE .)
    BOOLEAN         reduce using rule 53 (conditional -> VARIABLE OP_RELA_BIGGER VARIABLE .)
    $end            reduce using rule 53 (conditional -> VARIABLE OP_RELA_BIGGER VARIABLE .)
    OP_EXPR_CLOSE_PARENTHESIS reduce using rule 53 (conditional -> VARIABLE OP_RELA_BIGGER VARIABLE .)
    ELSE            reduce using rule 53 (conditional -> VARIABLE OP_RELA_BIGGER VARIABLE .)


state 65

    (49) conditional -> VARIABLE OP_RELA_BIGGER NUMERIC .

    OP_MARK_COMMENT reduce using rule 49 (conditional -> VARIABLE OP_RELA_BIGGER NUMERIC .)
    INT             reduce using rule 49 (conditional -> VARIABLE OP_RELA_BIGGER NUMERIC .)
    DOUBLE          reduce using rule 49 (conditional -> VARIABLE OP_RELA_BIGGER NUMERIC .)
    BOOL            reduce using rule 49 (conditional -> VARIABLE OP_RELA_BIGGER NUMERIC .)
    CHARACTER       reduce using rule 49 (conditional -> VARIABLE OP_RELA_BIGGER NUMERIC .)
    STRING          reduce using rule 49 (conditional -> VARIABLE OP_RELA_BIGGER NUMERIC .)
    VARIABLE        reduce using rule 49 (conditional -> VARIABLE OP_RELA_BIGGER NUMERIC .)
    IF              reduce using rule 49 (conditional -> VARIABLE OP_RELA_BIGGER NUMERIC .)
    OP_EXPR_OPEN_PARENTHESIS reduce using rule 49 (conditional -> VARIABLE OP_RELA_BIGGER NUMERIC .)
    LITERAL         reduce using rule 49 (conditional -> VARIABLE OP_RELA_BIGGER NUMERIC .)
    NUMERIC         reduce using rule 49 (conditional -> VARIABLE OP_RELA_BIGGER NUMERIC .)
    BOOLEAN         reduce using rule 49 (conditional -> VARIABLE OP_RELA_BIGGER NUMERIC .)
    $end            reduce using rule 49 (conditional -> VARIABLE OP_RELA_BIGGER NUMERIC .)
    OP_EXPR_CLOSE_PARENTHESIS reduce using rule 49 (conditional -> VARIABLE OP_RELA_BIGGER NUMERIC .)
    ELSE            reduce using rule 49 (conditional -> VARIABLE OP_RELA_BIGGER NUMERIC .)


state 66

    (50) conditional -> VARIABLE OP_RELA_BIGGER BOOLEAN .

    OP_MARK_COMMENT reduce using rule 50 (conditional -> VARIABLE OP_RELA_BIGGER BOOLEAN .)
    INT             reduce using rule 50 (conditional -> VARIABLE OP_RELA_BIGGER BOOLEAN .)
    DOUBLE          reduce using rule 50 (conditional -> VARIABLE OP_RELA_BIGGER BOOLEAN .)
    BOOL            reduce using rule 50 (conditional -> VARIABLE OP_RELA_BIGGER BOOLEAN .)
    CHARACTER       reduce using rule 50 (conditional -> VARIABLE OP_RELA_BIGGER BOOLEAN .)
    STRING          reduce using rule 50 (conditional -> VARIABLE OP_RELA_BIGGER BOOLEAN .)
    VARIABLE        reduce using rule 50 (conditional -> VARIABLE OP_RELA_BIGGER BOOLEAN .)
    IF              reduce using rule 50 (conditional -> VARIABLE OP_RELA_BIGGER BOOLEAN .)
    OP_EXPR_OPEN_PARENTHESIS reduce using rule 50 (conditional -> VARIABLE OP_RELA_BIGGER BOOLEAN .)
    LITERAL         reduce using rule 50 (conditional -> VARIABLE OP_RELA_BIGGER BOOLEAN .)
    NUMERIC         reduce using rule 50 (conditional -> VARIABLE OP_RELA_BIGGER BOOLEAN .)
    BOOLEAN         reduce using rule 50 (conditional -> VARIABLE OP_RELA_BIGGER BOOLEAN .)
    $end            reduce using rule 50 (conditional -> VARIABLE OP_RELA_BIGGER BOOLEAN .)
    OP_EXPR_CLOSE_PARENTHESIS reduce using rule 50 (conditional -> VARIABLE OP_RELA_BIGGER BOOLEAN .)
    ELSE            reduce using rule 50 (conditional -> VARIABLE OP_RELA_BIGGER BOOLEAN .)


state 67

    (51) conditional -> VARIABLE OP_RELA_BIGGER LITERAL .

    OP_MARK_COMMENT reduce using rule 51 (conditional -> VARIABLE OP_RELA_BIGGER LITERAL .)
    INT             reduce using rule 51 (conditional -> VARIABLE OP_RELA_BIGGER LITERAL .)
    DOUBLE          reduce using rule 51 (conditional -> VARIABLE OP_RELA_BIGGER LITERAL .)
    BOOL            reduce using rule 51 (conditional -> VARIABLE OP_RELA_BIGGER LITERAL .)
    CHARACTER       reduce using rule 51 (conditional -> VARIABLE OP_RELA_BIGGER LITERAL .)
    STRING          reduce using rule 51 (conditional -> VARIABLE OP_RELA_BIGGER LITERAL .)
    VARIABLE        reduce using rule 51 (conditional -> VARIABLE OP_RELA_BIGGER LITERAL .)
    IF              reduce using rule 51 (conditional -> VARIABLE OP_RELA_BIGGER LITERAL .)
    OP_EXPR_OPEN_PARENTHESIS reduce using rule 51 (conditional -> VARIABLE OP_RELA_BIGGER LITERAL .)
    LITERAL         reduce using rule 51 (conditional -> VARIABLE OP_RELA_BIGGER LITERAL .)
    NUMERIC         reduce using rule 51 (conditional -> VARIABLE OP_RELA_BIGGER LITERAL .)
    BOOLEAN         reduce using rule 51 (conditional -> VARIABLE OP_RELA_BIGGER LITERAL .)
    $end            reduce using rule 51 (conditional -> VARIABLE OP_RELA_BIGGER LITERAL .)
    OP_EXPR_CLOSE_PARENTHESIS reduce using rule 51 (conditional -> VARIABLE OP_RELA_BIGGER LITERAL .)
    ELSE            reduce using rule 51 (conditional -> VARIABLE OP_RELA_BIGGER LITERAL .)


state 68

    (52) conditional -> VARIABLE OP_RELA_BIGGER CHARACTER .

    OP_MARK_COMMENT reduce using rule 52 (conditional -> VARIABLE OP_RELA_BIGGER CHARACTER .)
    INT             reduce using rule 52 (conditional -> VARIABLE OP_RELA_BIGGER CHARACTER .)
    DOUBLE          reduce using rule 52 (conditional -> VARIABLE OP_RELA_BIGGER CHARACTER .)
    BOOL            reduce using rule 52 (conditional -> VARIABLE OP_RELA_BIGGER CHARACTER .)
    CHARACTER       reduce using rule 52 (conditional -> VARIABLE OP_RELA_BIGGER CHARACTER .)
    STRING          reduce using rule 52 (conditional -> VARIABLE OP_RELA_BIGGER CHARACTER .)
    VARIABLE        reduce using rule 52 (conditional -> VARIABLE OP_RELA_BIGGER CHARACTER .)
    IF              reduce using rule 52 (conditional -> VARIABLE OP_RELA_BIGGER CHARACTER .)
    OP_EXPR_OPEN_PARENTHESIS reduce using rule 52 (conditional -> VARIABLE OP_RELA_BIGGER CHARACTER .)
    LITERAL         reduce using rule 52 (conditional -> VARIABLE OP_RELA_BIGGER CHARACTER .)
    NUMERIC         reduce using rule 52 (conditional -> VARIABLE OP_RELA_BIGGER CHARACTER .)
    BOOLEAN         reduce using rule 52 (conditional -> VARIABLE OP_RELA_BIGGER CHARACTER .)
    $end            reduce using rule 52 (conditional -> VARIABLE OP_RELA_BIGGER CHARACTER .)
    OP_EXPR_CLOSE_PARENTHESIS reduce using rule 52 (conditional -> VARIABLE OP_RELA_BIGGER CHARACTER .)
    ELSE            reduce using rule 52 (conditional -> VARIABLE OP_RELA_BIGGER CHARACTER .)


state 69

    (58) conditional -> VARIABLE OP_RELA_LESS_EQUAL VARIABLE .

    OP_MARK_COMMENT reduce using rule 58 (conditional -> VARIABLE OP_RELA_LESS_EQUAL VARIABLE .)
    INT             reduce using rule 58 (conditional -> VARIABLE OP_RELA_LESS_EQUAL VARIABLE .)
    DOUBLE          reduce using rule 58 (conditional -> VARIABLE OP_RELA_LESS_EQUAL VARIABLE .)
    BOOL            reduce using rule 58 (conditional -> VARIABLE OP_RELA_LESS_EQUAL VARIABLE .)
    CHARACTER       reduce using rule 58 (conditional -> VARIABLE OP_RELA_LESS_EQUAL VARIABLE .)
    STRING          reduce using rule 58 (conditional -> VARIABLE OP_RELA_LESS_EQUAL VARIABLE .)
    VARIABLE        reduce using rule 58 (conditional -> VARIABLE OP_RELA_LESS_EQUAL VARIABLE .)
    IF              reduce using rule 58 (conditional -> VARIABLE OP_RELA_LESS_EQUAL VARIABLE .)
    OP_EXPR_OPEN_PARENTHESIS reduce using rule 58 (conditional -> VARIABLE OP_RELA_LESS_EQUAL VARIABLE .)
    LITERAL         reduce using rule 58 (conditional -> VARIABLE OP_RELA_LESS_EQUAL VARIABLE .)
    NUMERIC         reduce using rule 58 (conditional -> VARIABLE OP_RELA_LESS_EQUAL VARIABLE .)
    BOOLEAN         reduce using rule 58 (conditional -> VARIABLE OP_RELA_LESS_EQUAL VARIABLE .)
    $end            reduce using rule 58 (conditional -> VARIABLE OP_RELA_LESS_EQUAL VARIABLE .)
    OP_EXPR_CLOSE_PARENTHESIS reduce using rule 58 (conditional -> VARIABLE OP_RELA_LESS_EQUAL VARIABLE .)
    ELSE            reduce using rule 58 (conditional -> VARIABLE OP_RELA_LESS_EQUAL VARIABLE .)


state 70

    (54) conditional -> VARIABLE OP_RELA_LESS_EQUAL NUMERIC .

    OP_MARK_COMMENT reduce using rule 54 (conditional -> VARIABLE OP_RELA_LESS_EQUAL NUMERIC .)
    INT             reduce using rule 54 (conditional -> VARIABLE OP_RELA_LESS_EQUAL NUMERIC .)
    DOUBLE          reduce using rule 54 (conditional -> VARIABLE OP_RELA_LESS_EQUAL NUMERIC .)
    BOOL            reduce using rule 54 (conditional -> VARIABLE OP_RELA_LESS_EQUAL NUMERIC .)
    CHARACTER       reduce using rule 54 (conditional -> VARIABLE OP_RELA_LESS_EQUAL NUMERIC .)
    STRING          reduce using rule 54 (conditional -> VARIABLE OP_RELA_LESS_EQUAL NUMERIC .)
    VARIABLE        reduce using rule 54 (conditional -> VARIABLE OP_RELA_LESS_EQUAL NUMERIC .)
    IF              reduce using rule 54 (conditional -> VARIABLE OP_RELA_LESS_EQUAL NUMERIC .)
    OP_EXPR_OPEN_PARENTHESIS reduce using rule 54 (conditional -> VARIABLE OP_RELA_LESS_EQUAL NUMERIC .)
    LITERAL         reduce using rule 54 (conditional -> VARIABLE OP_RELA_LESS_EQUAL NUMERIC .)
    NUMERIC         reduce using rule 54 (conditional -> VARIABLE OP_RELA_LESS_EQUAL NUMERIC .)
    BOOLEAN         reduce using rule 54 (conditional -> VARIABLE OP_RELA_LESS_EQUAL NUMERIC .)
    $end            reduce using rule 54 (conditional -> VARIABLE OP_RELA_LESS_EQUAL NUMERIC .)
    OP_EXPR_CLOSE_PARENTHESIS reduce using rule 54 (conditional -> VARIABLE OP_RELA_LESS_EQUAL NUMERIC .)
    ELSE            reduce using rule 54 (conditional -> VARIABLE OP_RELA_LESS_EQUAL NUMERIC .)


state 71

    (55) conditional -> VARIABLE OP_RELA_LESS_EQUAL BOOLEAN .

    OP_MARK_COMMENT reduce using rule 55 (conditional -> VARIABLE OP_RELA_LESS_EQUAL BOOLEAN .)
    INT             reduce using rule 55 (conditional -> VARIABLE OP_RELA_LESS_EQUAL BOOLEAN .)
    DOUBLE          reduce using rule 55 (conditional -> VARIABLE OP_RELA_LESS_EQUAL BOOLEAN .)
    BOOL            reduce using rule 55 (conditional -> VARIABLE OP_RELA_LESS_EQUAL BOOLEAN .)
    CHARACTER       reduce using rule 55 (conditional -> VARIABLE OP_RELA_LESS_EQUAL BOOLEAN .)
    STRING          reduce using rule 55 (conditional -> VARIABLE OP_RELA_LESS_EQUAL BOOLEAN .)
    VARIABLE        reduce using rule 55 (conditional -> VARIABLE OP_RELA_LESS_EQUAL BOOLEAN .)
    IF              reduce using rule 55 (conditional -> VARIABLE OP_RELA_LESS_EQUAL BOOLEAN .)
    OP_EXPR_OPEN_PARENTHESIS reduce using rule 55 (conditional -> VARIABLE OP_RELA_LESS_EQUAL BOOLEAN .)
    LITERAL         reduce using rule 55 (conditional -> VARIABLE OP_RELA_LESS_EQUAL BOOLEAN .)
    NUMERIC         reduce using rule 55 (conditional -> VARIABLE OP_RELA_LESS_EQUAL BOOLEAN .)
    BOOLEAN         reduce using rule 55 (conditional -> VARIABLE OP_RELA_LESS_EQUAL BOOLEAN .)
    $end            reduce using rule 55 (conditional -> VARIABLE OP_RELA_LESS_EQUAL BOOLEAN .)
    OP_EXPR_CLOSE_PARENTHESIS reduce using rule 55 (conditional -> VARIABLE OP_RELA_LESS_EQUAL BOOLEAN .)
    ELSE            reduce using rule 55 (conditional -> VARIABLE OP_RELA_LESS_EQUAL BOOLEAN .)


state 72

    (56) conditional -> VARIABLE OP_RELA_LESS_EQUAL LITERAL .

    OP_MARK_COMMENT reduce using rule 56 (conditional -> VARIABLE OP_RELA_LESS_EQUAL LITERAL .)
    INT             reduce using rule 56 (conditional -> VARIABLE OP_RELA_LESS_EQUAL LITERAL .)
    DOUBLE          reduce using rule 56 (conditional -> VARIABLE OP_RELA_LESS_EQUAL LITERAL .)
    BOOL            reduce using rule 56 (conditional -> VARIABLE OP_RELA_LESS_EQUAL LITERAL .)
    CHARACTER       reduce using rule 56 (conditional -> VARIABLE OP_RELA_LESS_EQUAL LITERAL .)
    STRING          reduce using rule 56 (conditional -> VARIABLE OP_RELA_LESS_EQUAL LITERAL .)
    VARIABLE        reduce using rule 56 (conditional -> VARIABLE OP_RELA_LESS_EQUAL LITERAL .)
    IF              reduce using rule 56 (conditional -> VARIABLE OP_RELA_LESS_EQUAL LITERAL .)
    OP_EXPR_OPEN_PARENTHESIS reduce using rule 56 (conditional -> VARIABLE OP_RELA_LESS_EQUAL LITERAL .)
    LITERAL         reduce using rule 56 (conditional -> VARIABLE OP_RELA_LESS_EQUAL LITERAL .)
    NUMERIC         reduce using rule 56 (conditional -> VARIABLE OP_RELA_LESS_EQUAL LITERAL .)
    BOOLEAN         reduce using rule 56 (conditional -> VARIABLE OP_RELA_LESS_EQUAL LITERAL .)
    $end            reduce using rule 56 (conditional -> VARIABLE OP_RELA_LESS_EQUAL LITERAL .)
    OP_EXPR_CLOSE_PARENTHESIS reduce using rule 56 (conditional -> VARIABLE OP_RELA_LESS_EQUAL LITERAL .)
    ELSE            reduce using rule 56 (conditional -> VARIABLE OP_RELA_LESS_EQUAL LITERAL .)


state 73

    (57) conditional -> VARIABLE OP_RELA_LESS_EQUAL CHARACTER .

    OP_MARK_COMMENT reduce using rule 57 (conditional -> VARIABLE OP_RELA_LESS_EQUAL CHARACTER .)
    INT             reduce using rule 57 (conditional -> VARIABLE OP_RELA_LESS_EQUAL CHARACTER .)
    DOUBLE          reduce using rule 57 (conditional -> VARIABLE OP_RELA_LESS_EQUAL CHARACTER .)
    BOOL            reduce using rule 57 (conditional -> VARIABLE OP_RELA_LESS_EQUAL CHARACTER .)
    CHARACTER       reduce using rule 57 (conditional -> VARIABLE OP_RELA_LESS_EQUAL CHARACTER .)
    STRING          reduce using rule 57 (conditional -> VARIABLE OP_RELA_LESS_EQUAL CHARACTER .)
    VARIABLE        reduce using rule 57 (conditional -> VARIABLE OP_RELA_LESS_EQUAL CHARACTER .)
    IF              reduce using rule 57 (conditional -> VARIABLE OP_RELA_LESS_EQUAL CHARACTER .)
    OP_EXPR_OPEN_PARENTHESIS reduce using rule 57 (conditional -> VARIABLE OP_RELA_LESS_EQUAL CHARACTER .)
    LITERAL         reduce using rule 57 (conditional -> VARIABLE OP_RELA_LESS_EQUAL CHARACTER .)
    NUMERIC         reduce using rule 57 (conditional -> VARIABLE OP_RELA_LESS_EQUAL CHARACTER .)
    BOOLEAN         reduce using rule 57 (conditional -> VARIABLE OP_RELA_LESS_EQUAL CHARACTER .)
    $end            reduce using rule 57 (conditional -> VARIABLE OP_RELA_LESS_EQUAL CHARACTER .)
    OP_EXPR_CLOSE_PARENTHESIS reduce using rule 57 (conditional -> VARIABLE OP_RELA_LESS_EQUAL CHARACTER .)
    ELSE            reduce using rule 57 (conditional -> VARIABLE OP_RELA_LESS_EQUAL CHARACTER .)


state 74

    (63) conditional -> VARIABLE OP_RELA_BIGGER_EQUAL VARIABLE .

    OP_MARK_COMMENT reduce using rule 63 (conditional -> VARIABLE OP_RELA_BIGGER_EQUAL VARIABLE .)
    INT             reduce using rule 63 (conditional -> VARIABLE OP_RELA_BIGGER_EQUAL VARIABLE .)
    DOUBLE          reduce using rule 63 (conditional -> VARIABLE OP_RELA_BIGGER_EQUAL VARIABLE .)
    BOOL            reduce using rule 63 (conditional -> VARIABLE OP_RELA_BIGGER_EQUAL VARIABLE .)
    CHARACTER       reduce using rule 63 (conditional -> VARIABLE OP_RELA_BIGGER_EQUAL VARIABLE .)
    STRING          reduce using rule 63 (conditional -> VARIABLE OP_RELA_BIGGER_EQUAL VARIABLE .)
    VARIABLE        reduce using rule 63 (conditional -> VARIABLE OP_RELA_BIGGER_EQUAL VARIABLE .)
    IF              reduce using rule 63 (conditional -> VARIABLE OP_RELA_BIGGER_EQUAL VARIABLE .)
    OP_EXPR_OPEN_PARENTHESIS reduce using rule 63 (conditional -> VARIABLE OP_RELA_BIGGER_EQUAL VARIABLE .)
    LITERAL         reduce using rule 63 (conditional -> VARIABLE OP_RELA_BIGGER_EQUAL VARIABLE .)
    NUMERIC         reduce using rule 63 (conditional -> VARIABLE OP_RELA_BIGGER_EQUAL VARIABLE .)
    BOOLEAN         reduce using rule 63 (conditional -> VARIABLE OP_RELA_BIGGER_EQUAL VARIABLE .)
    $end            reduce using rule 63 (conditional -> VARIABLE OP_RELA_BIGGER_EQUAL VARIABLE .)
    OP_EXPR_CLOSE_PARENTHESIS reduce using rule 63 (conditional -> VARIABLE OP_RELA_BIGGER_EQUAL VARIABLE .)
    ELSE            reduce using rule 63 (conditional -> VARIABLE OP_RELA_BIGGER_EQUAL VARIABLE .)


state 75

    (59) conditional -> VARIABLE OP_RELA_BIGGER_EQUAL NUMERIC .

    OP_MARK_COMMENT reduce using rule 59 (conditional -> VARIABLE OP_RELA_BIGGER_EQUAL NUMERIC .)
    INT             reduce using rule 59 (conditional -> VARIABLE OP_RELA_BIGGER_EQUAL NUMERIC .)
    DOUBLE          reduce using rule 59 (conditional -> VARIABLE OP_RELA_BIGGER_EQUAL NUMERIC .)
    BOOL            reduce using rule 59 (conditional -> VARIABLE OP_RELA_BIGGER_EQUAL NUMERIC .)
    CHARACTER       reduce using rule 59 (conditional -> VARIABLE OP_RELA_BIGGER_EQUAL NUMERIC .)
    STRING          reduce using rule 59 (conditional -> VARIABLE OP_RELA_BIGGER_EQUAL NUMERIC .)
    VARIABLE        reduce using rule 59 (conditional -> VARIABLE OP_RELA_BIGGER_EQUAL NUMERIC .)
    IF              reduce using rule 59 (conditional -> VARIABLE OP_RELA_BIGGER_EQUAL NUMERIC .)
    OP_EXPR_OPEN_PARENTHESIS reduce using rule 59 (conditional -> VARIABLE OP_RELA_BIGGER_EQUAL NUMERIC .)
    LITERAL         reduce using rule 59 (conditional -> VARIABLE OP_RELA_BIGGER_EQUAL NUMERIC .)
    NUMERIC         reduce using rule 59 (conditional -> VARIABLE OP_RELA_BIGGER_EQUAL NUMERIC .)
    BOOLEAN         reduce using rule 59 (conditional -> VARIABLE OP_RELA_BIGGER_EQUAL NUMERIC .)
    $end            reduce using rule 59 (conditional -> VARIABLE OP_RELA_BIGGER_EQUAL NUMERIC .)
    OP_EXPR_CLOSE_PARENTHESIS reduce using rule 59 (conditional -> VARIABLE OP_RELA_BIGGER_EQUAL NUMERIC .)
    ELSE            reduce using rule 59 (conditional -> VARIABLE OP_RELA_BIGGER_EQUAL NUMERIC .)


state 76

    (60) conditional -> VARIABLE OP_RELA_BIGGER_EQUAL BOOLEAN .

    OP_MARK_COMMENT reduce using rule 60 (conditional -> VARIABLE OP_RELA_BIGGER_EQUAL BOOLEAN .)
    INT             reduce using rule 60 (conditional -> VARIABLE OP_RELA_BIGGER_EQUAL BOOLEAN .)
    DOUBLE          reduce using rule 60 (conditional -> VARIABLE OP_RELA_BIGGER_EQUAL BOOLEAN .)
    BOOL            reduce using rule 60 (conditional -> VARIABLE OP_RELA_BIGGER_EQUAL BOOLEAN .)
    CHARACTER       reduce using rule 60 (conditional -> VARIABLE OP_RELA_BIGGER_EQUAL BOOLEAN .)
    STRING          reduce using rule 60 (conditional -> VARIABLE OP_RELA_BIGGER_EQUAL BOOLEAN .)
    VARIABLE        reduce using rule 60 (conditional -> VARIABLE OP_RELA_BIGGER_EQUAL BOOLEAN .)
    IF              reduce using rule 60 (conditional -> VARIABLE OP_RELA_BIGGER_EQUAL BOOLEAN .)
    OP_EXPR_OPEN_PARENTHESIS reduce using rule 60 (conditional -> VARIABLE OP_RELA_BIGGER_EQUAL BOOLEAN .)
    LITERAL         reduce using rule 60 (conditional -> VARIABLE OP_RELA_BIGGER_EQUAL BOOLEAN .)
    NUMERIC         reduce using rule 60 (conditional -> VARIABLE OP_RELA_BIGGER_EQUAL BOOLEAN .)
    BOOLEAN         reduce using rule 60 (conditional -> VARIABLE OP_RELA_BIGGER_EQUAL BOOLEAN .)
    $end            reduce using rule 60 (conditional -> VARIABLE OP_RELA_BIGGER_EQUAL BOOLEAN .)
    OP_EXPR_CLOSE_PARENTHESIS reduce using rule 60 (conditional -> VARIABLE OP_RELA_BIGGER_EQUAL BOOLEAN .)
    ELSE            reduce using rule 60 (conditional -> VARIABLE OP_RELA_BIGGER_EQUAL BOOLEAN .)


state 77

    (61) conditional -> VARIABLE OP_RELA_BIGGER_EQUAL LITERAL .

    OP_MARK_COMMENT reduce using rule 61 (conditional -> VARIABLE OP_RELA_BIGGER_EQUAL LITERAL .)
    INT             reduce using rule 61 (conditional -> VARIABLE OP_RELA_BIGGER_EQUAL LITERAL .)
    DOUBLE          reduce using rule 61 (conditional -> VARIABLE OP_RELA_BIGGER_EQUAL LITERAL .)
    BOOL            reduce using rule 61 (conditional -> VARIABLE OP_RELA_BIGGER_EQUAL LITERAL .)
    CHARACTER       reduce using rule 61 (conditional -> VARIABLE OP_RELA_BIGGER_EQUAL LITERAL .)
    STRING          reduce using rule 61 (conditional -> VARIABLE OP_RELA_BIGGER_EQUAL LITERAL .)
    VARIABLE        reduce using rule 61 (conditional -> VARIABLE OP_RELA_BIGGER_EQUAL LITERAL .)
    IF              reduce using rule 61 (conditional -> VARIABLE OP_RELA_BIGGER_EQUAL LITERAL .)
    OP_EXPR_OPEN_PARENTHESIS reduce using rule 61 (conditional -> VARIABLE OP_RELA_BIGGER_EQUAL LITERAL .)
    LITERAL         reduce using rule 61 (conditional -> VARIABLE OP_RELA_BIGGER_EQUAL LITERAL .)
    NUMERIC         reduce using rule 61 (conditional -> VARIABLE OP_RELA_BIGGER_EQUAL LITERAL .)
    BOOLEAN         reduce using rule 61 (conditional -> VARIABLE OP_RELA_BIGGER_EQUAL LITERAL .)
    $end            reduce using rule 61 (conditional -> VARIABLE OP_RELA_BIGGER_EQUAL LITERAL .)
    OP_EXPR_CLOSE_PARENTHESIS reduce using rule 61 (conditional -> VARIABLE OP_RELA_BIGGER_EQUAL LITERAL .)
    ELSE            reduce using rule 61 (conditional -> VARIABLE OP_RELA_BIGGER_EQUAL LITERAL .)


state 78

    (62) conditional -> VARIABLE OP_RELA_BIGGER_EQUAL CHARACTER .

    OP_MARK_COMMENT reduce using rule 62 (conditional -> VARIABLE OP_RELA_BIGGER_EQUAL CHARACTER .)
    INT             reduce using rule 62 (conditional -> VARIABLE OP_RELA_BIGGER_EQUAL CHARACTER .)
    DOUBLE          reduce using rule 62 (conditional -> VARIABLE OP_RELA_BIGGER_EQUAL CHARACTER .)
    BOOL            reduce using rule 62 (conditional -> VARIABLE OP_RELA_BIGGER_EQUAL CHARACTER .)
    CHARACTER       reduce using rule 62 (conditional -> VARIABLE OP_RELA_BIGGER_EQUAL CHARACTER .)
    STRING          reduce using rule 62 (conditional -> VARIABLE OP_RELA_BIGGER_EQUAL CHARACTER .)
    VARIABLE        reduce using rule 62 (conditional -> VARIABLE OP_RELA_BIGGER_EQUAL CHARACTER .)
    IF              reduce using rule 62 (conditional -> VARIABLE OP_RELA_BIGGER_EQUAL CHARACTER .)
    OP_EXPR_OPEN_PARENTHESIS reduce using rule 62 (conditional -> VARIABLE OP_RELA_BIGGER_EQUAL CHARACTER .)
    LITERAL         reduce using rule 62 (conditional -> VARIABLE OP_RELA_BIGGER_EQUAL CHARACTER .)
    NUMERIC         reduce using rule 62 (conditional -> VARIABLE OP_RELA_BIGGER_EQUAL CHARACTER .)
    BOOLEAN         reduce using rule 62 (conditional -> VARIABLE OP_RELA_BIGGER_EQUAL CHARACTER .)
    $end            reduce using rule 62 (conditional -> VARIABLE OP_RELA_BIGGER_EQUAL CHARACTER .)
    OP_EXPR_CLOSE_PARENTHESIS reduce using rule 62 (conditional -> VARIABLE OP_RELA_BIGGER_EQUAL CHARACTER .)
    ELSE            reduce using rule 62 (conditional -> VARIABLE OP_RELA_BIGGER_EQUAL CHARACTER .)


state 79

    (68) conditional -> VARIABLE OP_RELA_COMPARE VARIABLE .

    OP_MARK_COMMENT reduce using rule 68 (conditional -> VARIABLE OP_RELA_COMPARE VARIABLE .)
    INT             reduce using rule 68 (conditional -> VARIABLE OP_RELA_COMPARE VARIABLE .)
    DOUBLE          reduce using rule 68 (conditional -> VARIABLE OP_RELA_COMPARE VARIABLE .)
    BOOL            reduce using rule 68 (conditional -> VARIABLE OP_RELA_COMPARE VARIABLE .)
    CHARACTER       reduce using rule 68 (conditional -> VARIABLE OP_RELA_COMPARE VARIABLE .)
    STRING          reduce using rule 68 (conditional -> VARIABLE OP_RELA_COMPARE VARIABLE .)
    VARIABLE        reduce using rule 68 (conditional -> VARIABLE OP_RELA_COMPARE VARIABLE .)
    IF              reduce using rule 68 (conditional -> VARIABLE OP_RELA_COMPARE VARIABLE .)
    OP_EXPR_OPEN_PARENTHESIS reduce using rule 68 (conditional -> VARIABLE OP_RELA_COMPARE VARIABLE .)
    LITERAL         reduce using rule 68 (conditional -> VARIABLE OP_RELA_COMPARE VARIABLE .)
    NUMERIC         reduce using rule 68 (conditional -> VARIABLE OP_RELA_COMPARE VARIABLE .)
    BOOLEAN         reduce using rule 68 (conditional -> VARIABLE OP_RELA_COMPARE VARIABLE .)
    $end            reduce using rule 68 (conditional -> VARIABLE OP_RELA_COMPARE VARIABLE .)
    OP_EXPR_CLOSE_PARENTHESIS reduce using rule 68 (conditional -> VARIABLE OP_RELA_COMPARE VARIABLE .)
    ELSE            reduce using rule 68 (conditional -> VARIABLE OP_RELA_COMPARE VARIABLE .)


state 80

    (64) conditional -> VARIABLE OP_RELA_COMPARE NUMERIC .

    OP_MARK_COMMENT reduce using rule 64 (conditional -> VARIABLE OP_RELA_COMPARE NUMERIC .)
    INT             reduce using rule 64 (conditional -> VARIABLE OP_RELA_COMPARE NUMERIC .)
    DOUBLE          reduce using rule 64 (conditional -> VARIABLE OP_RELA_COMPARE NUMERIC .)
    BOOL            reduce using rule 64 (conditional -> VARIABLE OP_RELA_COMPARE NUMERIC .)
    CHARACTER       reduce using rule 64 (conditional -> VARIABLE OP_RELA_COMPARE NUMERIC .)
    STRING          reduce using rule 64 (conditional -> VARIABLE OP_RELA_COMPARE NUMERIC .)
    VARIABLE        reduce using rule 64 (conditional -> VARIABLE OP_RELA_COMPARE NUMERIC .)
    IF              reduce using rule 64 (conditional -> VARIABLE OP_RELA_COMPARE NUMERIC .)
    OP_EXPR_OPEN_PARENTHESIS reduce using rule 64 (conditional -> VARIABLE OP_RELA_COMPARE NUMERIC .)
    LITERAL         reduce using rule 64 (conditional -> VARIABLE OP_RELA_COMPARE NUMERIC .)
    NUMERIC         reduce using rule 64 (conditional -> VARIABLE OP_RELA_COMPARE NUMERIC .)
    BOOLEAN         reduce using rule 64 (conditional -> VARIABLE OP_RELA_COMPARE NUMERIC .)
    $end            reduce using rule 64 (conditional -> VARIABLE OP_RELA_COMPARE NUMERIC .)
    OP_EXPR_CLOSE_PARENTHESIS reduce using rule 64 (conditional -> VARIABLE OP_RELA_COMPARE NUMERIC .)
    ELSE            reduce using rule 64 (conditional -> VARIABLE OP_RELA_COMPARE NUMERIC .)


state 81

    (65) conditional -> VARIABLE OP_RELA_COMPARE BOOLEAN .

    OP_MARK_COMMENT reduce using rule 65 (conditional -> VARIABLE OP_RELA_COMPARE BOOLEAN .)
    INT             reduce using rule 65 (conditional -> VARIABLE OP_RELA_COMPARE BOOLEAN .)
    DOUBLE          reduce using rule 65 (conditional -> VARIABLE OP_RELA_COMPARE BOOLEAN .)
    BOOL            reduce using rule 65 (conditional -> VARIABLE OP_RELA_COMPARE BOOLEAN .)
    CHARACTER       reduce using rule 65 (conditional -> VARIABLE OP_RELA_COMPARE BOOLEAN .)
    STRING          reduce using rule 65 (conditional -> VARIABLE OP_RELA_COMPARE BOOLEAN .)
    VARIABLE        reduce using rule 65 (conditional -> VARIABLE OP_RELA_COMPARE BOOLEAN .)
    IF              reduce using rule 65 (conditional -> VARIABLE OP_RELA_COMPARE BOOLEAN .)
    OP_EXPR_OPEN_PARENTHESIS reduce using rule 65 (conditional -> VARIABLE OP_RELA_COMPARE BOOLEAN .)
    LITERAL         reduce using rule 65 (conditional -> VARIABLE OP_RELA_COMPARE BOOLEAN .)
    NUMERIC         reduce using rule 65 (conditional -> VARIABLE OP_RELA_COMPARE BOOLEAN .)
    BOOLEAN         reduce using rule 65 (conditional -> VARIABLE OP_RELA_COMPARE BOOLEAN .)
    $end            reduce using rule 65 (conditional -> VARIABLE OP_RELA_COMPARE BOOLEAN .)
    OP_EXPR_CLOSE_PARENTHESIS reduce using rule 65 (conditional -> VARIABLE OP_RELA_COMPARE BOOLEAN .)
    ELSE            reduce using rule 65 (conditional -> VARIABLE OP_RELA_COMPARE BOOLEAN .)


state 82

    (66) conditional -> VARIABLE OP_RELA_COMPARE LITERAL .

    OP_MARK_COMMENT reduce using rule 66 (conditional -> VARIABLE OP_RELA_COMPARE LITERAL .)
    INT             reduce using rule 66 (conditional -> VARIABLE OP_RELA_COMPARE LITERAL .)
    DOUBLE          reduce using rule 66 (conditional -> VARIABLE OP_RELA_COMPARE LITERAL .)
    BOOL            reduce using rule 66 (conditional -> VARIABLE OP_RELA_COMPARE LITERAL .)
    CHARACTER       reduce using rule 66 (conditional -> VARIABLE OP_RELA_COMPARE LITERAL .)
    STRING          reduce using rule 66 (conditional -> VARIABLE OP_RELA_COMPARE LITERAL .)
    VARIABLE        reduce using rule 66 (conditional -> VARIABLE OP_RELA_COMPARE LITERAL .)
    IF              reduce using rule 66 (conditional -> VARIABLE OP_RELA_COMPARE LITERAL .)
    OP_EXPR_OPEN_PARENTHESIS reduce using rule 66 (conditional -> VARIABLE OP_RELA_COMPARE LITERAL .)
    LITERAL         reduce using rule 66 (conditional -> VARIABLE OP_RELA_COMPARE LITERAL .)
    NUMERIC         reduce using rule 66 (conditional -> VARIABLE OP_RELA_COMPARE LITERAL .)
    BOOLEAN         reduce using rule 66 (conditional -> VARIABLE OP_RELA_COMPARE LITERAL .)
    $end            reduce using rule 66 (conditional -> VARIABLE OP_RELA_COMPARE LITERAL .)
    OP_EXPR_CLOSE_PARENTHESIS reduce using rule 66 (conditional -> VARIABLE OP_RELA_COMPARE LITERAL .)
    ELSE            reduce using rule 66 (conditional -> VARIABLE OP_RELA_COMPARE LITERAL .)


state 83

    (67) conditional -> VARIABLE OP_RELA_COMPARE CHARACTER .

    OP_MARK_COMMENT reduce using rule 67 (conditional -> VARIABLE OP_RELA_COMPARE CHARACTER .)
    INT             reduce using rule 67 (conditional -> VARIABLE OP_RELA_COMPARE CHARACTER .)
    DOUBLE          reduce using rule 67 (conditional -> VARIABLE OP_RELA_COMPARE CHARACTER .)
    BOOL            reduce using rule 67 (conditional -> VARIABLE OP_RELA_COMPARE CHARACTER .)
    CHARACTER       reduce using rule 67 (conditional -> VARIABLE OP_RELA_COMPARE CHARACTER .)
    STRING          reduce using rule 67 (conditional -> VARIABLE OP_RELA_COMPARE CHARACTER .)
    VARIABLE        reduce using rule 67 (conditional -> VARIABLE OP_RELA_COMPARE CHARACTER .)
    IF              reduce using rule 67 (conditional -> VARIABLE OP_RELA_COMPARE CHARACTER .)
    OP_EXPR_OPEN_PARENTHESIS reduce using rule 67 (conditional -> VARIABLE OP_RELA_COMPARE CHARACTER .)
    LITERAL         reduce using rule 67 (conditional -> VARIABLE OP_RELA_COMPARE CHARACTER .)
    NUMERIC         reduce using rule 67 (conditional -> VARIABLE OP_RELA_COMPARE CHARACTER .)
    BOOLEAN         reduce using rule 67 (conditional -> VARIABLE OP_RELA_COMPARE CHARACTER .)
    $end            reduce using rule 67 (conditional -> VARIABLE OP_RELA_COMPARE CHARACTER .)
    OP_EXPR_CLOSE_PARENTHESIS reduce using rule 67 (conditional -> VARIABLE OP_RELA_COMPARE CHARACTER .)
    ELSE            reduce using rule 67 (conditional -> VARIABLE OP_RELA_COMPARE CHARACTER .)


state 84

    (73) conditional -> VARIABLE OP_RELA_DIFFERENTIATE VARIABLE .

    OP_MARK_COMMENT reduce using rule 73 (conditional -> VARIABLE OP_RELA_DIFFERENTIATE VARIABLE .)
    INT             reduce using rule 73 (conditional -> VARIABLE OP_RELA_DIFFERENTIATE VARIABLE .)
    DOUBLE          reduce using rule 73 (conditional -> VARIABLE OP_RELA_DIFFERENTIATE VARIABLE .)
    BOOL            reduce using rule 73 (conditional -> VARIABLE OP_RELA_DIFFERENTIATE VARIABLE .)
    CHARACTER       reduce using rule 73 (conditional -> VARIABLE OP_RELA_DIFFERENTIATE VARIABLE .)
    STRING          reduce using rule 73 (conditional -> VARIABLE OP_RELA_DIFFERENTIATE VARIABLE .)
    VARIABLE        reduce using rule 73 (conditional -> VARIABLE OP_RELA_DIFFERENTIATE VARIABLE .)
    IF              reduce using rule 73 (conditional -> VARIABLE OP_RELA_DIFFERENTIATE VARIABLE .)
    OP_EXPR_OPEN_PARENTHESIS reduce using rule 73 (conditional -> VARIABLE OP_RELA_DIFFERENTIATE VARIABLE .)
    LITERAL         reduce using rule 73 (conditional -> VARIABLE OP_RELA_DIFFERENTIATE VARIABLE .)
    NUMERIC         reduce using rule 73 (conditional -> VARIABLE OP_RELA_DIFFERENTIATE VARIABLE .)
    BOOLEAN         reduce using rule 73 (conditional -> VARIABLE OP_RELA_DIFFERENTIATE VARIABLE .)
    $end            reduce using rule 73 (conditional -> VARIABLE OP_RELA_DIFFERENTIATE VARIABLE .)
    OP_EXPR_CLOSE_PARENTHESIS reduce using rule 73 (conditional -> VARIABLE OP_RELA_DIFFERENTIATE VARIABLE .)
    ELSE            reduce using rule 73 (conditional -> VARIABLE OP_RELA_DIFFERENTIATE VARIABLE .)


state 85

    (69) conditional -> VARIABLE OP_RELA_DIFFERENTIATE NUMERIC .

    OP_MARK_COMMENT reduce using rule 69 (conditional -> VARIABLE OP_RELA_DIFFERENTIATE NUMERIC .)
    INT             reduce using rule 69 (conditional -> VARIABLE OP_RELA_DIFFERENTIATE NUMERIC .)
    DOUBLE          reduce using rule 69 (conditional -> VARIABLE OP_RELA_DIFFERENTIATE NUMERIC .)
    BOOL            reduce using rule 69 (conditional -> VARIABLE OP_RELA_DIFFERENTIATE NUMERIC .)
    CHARACTER       reduce using rule 69 (conditional -> VARIABLE OP_RELA_DIFFERENTIATE NUMERIC .)
    STRING          reduce using rule 69 (conditional -> VARIABLE OP_RELA_DIFFERENTIATE NUMERIC .)
    VARIABLE        reduce using rule 69 (conditional -> VARIABLE OP_RELA_DIFFERENTIATE NUMERIC .)
    IF              reduce using rule 69 (conditional -> VARIABLE OP_RELA_DIFFERENTIATE NUMERIC .)
    OP_EXPR_OPEN_PARENTHESIS reduce using rule 69 (conditional -> VARIABLE OP_RELA_DIFFERENTIATE NUMERIC .)
    LITERAL         reduce using rule 69 (conditional -> VARIABLE OP_RELA_DIFFERENTIATE NUMERIC .)
    NUMERIC         reduce using rule 69 (conditional -> VARIABLE OP_RELA_DIFFERENTIATE NUMERIC .)
    BOOLEAN         reduce using rule 69 (conditional -> VARIABLE OP_RELA_DIFFERENTIATE NUMERIC .)
    $end            reduce using rule 69 (conditional -> VARIABLE OP_RELA_DIFFERENTIATE NUMERIC .)
    OP_EXPR_CLOSE_PARENTHESIS reduce using rule 69 (conditional -> VARIABLE OP_RELA_DIFFERENTIATE NUMERIC .)
    ELSE            reduce using rule 69 (conditional -> VARIABLE OP_RELA_DIFFERENTIATE NUMERIC .)


state 86

    (70) conditional -> VARIABLE OP_RELA_DIFFERENTIATE BOOLEAN .

    OP_MARK_COMMENT reduce using rule 70 (conditional -> VARIABLE OP_RELA_DIFFERENTIATE BOOLEAN .)
    INT             reduce using rule 70 (conditional -> VARIABLE OP_RELA_DIFFERENTIATE BOOLEAN .)
    DOUBLE          reduce using rule 70 (conditional -> VARIABLE OP_RELA_DIFFERENTIATE BOOLEAN .)
    BOOL            reduce using rule 70 (conditional -> VARIABLE OP_RELA_DIFFERENTIATE BOOLEAN .)
    CHARACTER       reduce using rule 70 (conditional -> VARIABLE OP_RELA_DIFFERENTIATE BOOLEAN .)
    STRING          reduce using rule 70 (conditional -> VARIABLE OP_RELA_DIFFERENTIATE BOOLEAN .)
    VARIABLE        reduce using rule 70 (conditional -> VARIABLE OP_RELA_DIFFERENTIATE BOOLEAN .)
    IF              reduce using rule 70 (conditional -> VARIABLE OP_RELA_DIFFERENTIATE BOOLEAN .)
    OP_EXPR_OPEN_PARENTHESIS reduce using rule 70 (conditional -> VARIABLE OP_RELA_DIFFERENTIATE BOOLEAN .)
    LITERAL         reduce using rule 70 (conditional -> VARIABLE OP_RELA_DIFFERENTIATE BOOLEAN .)
    NUMERIC         reduce using rule 70 (conditional -> VARIABLE OP_RELA_DIFFERENTIATE BOOLEAN .)
    BOOLEAN         reduce using rule 70 (conditional -> VARIABLE OP_RELA_DIFFERENTIATE BOOLEAN .)
    $end            reduce using rule 70 (conditional -> VARIABLE OP_RELA_DIFFERENTIATE BOOLEAN .)
    OP_EXPR_CLOSE_PARENTHESIS reduce using rule 70 (conditional -> VARIABLE OP_RELA_DIFFERENTIATE BOOLEAN .)
    ELSE            reduce using rule 70 (conditional -> VARIABLE OP_RELA_DIFFERENTIATE BOOLEAN .)


state 87

    (71) conditional -> VARIABLE OP_RELA_DIFFERENTIATE LITERAL .

    OP_MARK_COMMENT reduce using rule 71 (conditional -> VARIABLE OP_RELA_DIFFERENTIATE LITERAL .)
    INT             reduce using rule 71 (conditional -> VARIABLE OP_RELA_DIFFERENTIATE LITERAL .)
    DOUBLE          reduce using rule 71 (conditional -> VARIABLE OP_RELA_DIFFERENTIATE LITERAL .)
    BOOL            reduce using rule 71 (conditional -> VARIABLE OP_RELA_DIFFERENTIATE LITERAL .)
    CHARACTER       reduce using rule 71 (conditional -> VARIABLE OP_RELA_DIFFERENTIATE LITERAL .)
    STRING          reduce using rule 71 (conditional -> VARIABLE OP_RELA_DIFFERENTIATE LITERAL .)
    VARIABLE        reduce using rule 71 (conditional -> VARIABLE OP_RELA_DIFFERENTIATE LITERAL .)
    IF              reduce using rule 71 (conditional -> VARIABLE OP_RELA_DIFFERENTIATE LITERAL .)
    OP_EXPR_OPEN_PARENTHESIS reduce using rule 71 (conditional -> VARIABLE OP_RELA_DIFFERENTIATE LITERAL .)
    LITERAL         reduce using rule 71 (conditional -> VARIABLE OP_RELA_DIFFERENTIATE LITERAL .)
    NUMERIC         reduce using rule 71 (conditional -> VARIABLE OP_RELA_DIFFERENTIATE LITERAL .)
    BOOLEAN         reduce using rule 71 (conditional -> VARIABLE OP_RELA_DIFFERENTIATE LITERAL .)
    $end            reduce using rule 71 (conditional -> VARIABLE OP_RELA_DIFFERENTIATE LITERAL .)
    OP_EXPR_CLOSE_PARENTHESIS reduce using rule 71 (conditional -> VARIABLE OP_RELA_DIFFERENTIATE LITERAL .)
    ELSE            reduce using rule 71 (conditional -> VARIABLE OP_RELA_DIFFERENTIATE LITERAL .)


state 88

    (72) conditional -> VARIABLE OP_RELA_DIFFERENTIATE CHARACTER .

    OP_MARK_COMMENT reduce using rule 72 (conditional -> VARIABLE OP_RELA_DIFFERENTIATE CHARACTER .)
    INT             reduce using rule 72 (conditional -> VARIABLE OP_RELA_DIFFERENTIATE CHARACTER .)
    DOUBLE          reduce using rule 72 (conditional -> VARIABLE OP_RELA_DIFFERENTIATE CHARACTER .)
    BOOL            reduce using rule 72 (conditional -> VARIABLE OP_RELA_DIFFERENTIATE CHARACTER .)
    CHARACTER       reduce using rule 72 (conditional -> VARIABLE OP_RELA_DIFFERENTIATE CHARACTER .)
    STRING          reduce using rule 72 (conditional -> VARIABLE OP_RELA_DIFFERENTIATE CHARACTER .)
    VARIABLE        reduce using rule 72 (conditional -> VARIABLE OP_RELA_DIFFERENTIATE CHARACTER .)
    IF              reduce using rule 72 (conditional -> VARIABLE OP_RELA_DIFFERENTIATE CHARACTER .)
    OP_EXPR_OPEN_PARENTHESIS reduce using rule 72 (conditional -> VARIABLE OP_RELA_DIFFERENTIATE CHARACTER .)
    LITERAL         reduce using rule 72 (conditional -> VARIABLE OP_RELA_DIFFERENTIATE CHARACTER .)
    NUMERIC         reduce using rule 72 (conditional -> VARIABLE OP_RELA_DIFFERENTIATE CHARACTER .)
    BOOLEAN         reduce using rule 72 (conditional -> VARIABLE OP_RELA_DIFFERENTIATE CHARACTER .)
    $end            reduce using rule 72 (conditional -> VARIABLE OP_RELA_DIFFERENTIATE CHARACTER .)
    OP_EXPR_CLOSE_PARENTHESIS reduce using rule 72 (conditional -> VARIABLE OP_RELA_DIFFERENTIATE CHARACTER .)
    ELSE            reduce using rule 72 (conditional -> VARIABLE OP_RELA_DIFFERENTIATE CHARACTER .)


state 89

    (35) declaration -> DOUBLE VARIABLE EOB .

    OP_MARK_COMMENT reduce using rule 35 (declaration -> DOUBLE VARIABLE EOB .)
    INT             reduce using rule 35 (declaration -> DOUBLE VARIABLE EOB .)
    DOUBLE          reduce using rule 35 (declaration -> DOUBLE VARIABLE EOB .)
    BOOL            reduce using rule 35 (declaration -> DOUBLE VARIABLE EOB .)
    CHARACTER       reduce using rule 35 (declaration -> DOUBLE VARIABLE EOB .)
    STRING          reduce using rule 35 (declaration -> DOUBLE VARIABLE EOB .)
    VARIABLE        reduce using rule 35 (declaration -> DOUBLE VARIABLE EOB .)
    IF              reduce using rule 35 (declaration -> DOUBLE VARIABLE EOB .)
    OP_EXPR_OPEN_PARENTHESIS reduce using rule 35 (declaration -> DOUBLE VARIABLE EOB .)
    LITERAL         reduce using rule 35 (declaration -> DOUBLE VARIABLE EOB .)
    NUMERIC         reduce using rule 35 (declaration -> DOUBLE VARIABLE EOB .)
    BOOLEAN         reduce using rule 35 (declaration -> DOUBLE VARIABLE EOB .)
    $end            reduce using rule 35 (declaration -> DOUBLE VARIABLE EOB .)
    ELSE            reduce using rule 35 (declaration -> DOUBLE VARIABLE EOB .)


state 90

    (17) assignment -> DOUBLE VARIABLE OP_ATRI_EQUAL . NUMERIC EOB
    (22) assignment -> DOUBLE VARIABLE OP_ATRI_EQUAL . VARIABLE EOB
    (27) assignment -> DOUBLE VARIABLE OP_ATRI_EQUAL . operation EOB
    (39) operation -> . VARIABLE OP_MATE_PLUS VARIABLE
    (40) operation -> . VARIABLE OP_MATE_MINUS VARIABLE
    (41) operation -> . VARIABLE OP_MATE_TIMES VARIABLE
    (42) operation -> . VARIABLE OP_MATE_DIVISION VARIABLE
    (43) operation -> . VARIABLE OP_MATE_MODULE VARIABLE

    NUMERIC         shift and go to state 111
    VARIABLE        shift and go to state 110

    operation                      shift and go to state 112

state 91

    (36) declaration -> BOOL VARIABLE EOB .

    OP_MARK_COMMENT reduce using rule 36 (declaration -> BOOL VARIABLE EOB .)
    INT             reduce using rule 36 (declaration -> BOOL VARIABLE EOB .)
    DOUBLE          reduce using rule 36 (declaration -> BOOL VARIABLE EOB .)
    BOOL            reduce using rule 36 (declaration -> BOOL VARIABLE EOB .)
    CHARACTER       reduce using rule 36 (declaration -> BOOL VARIABLE EOB .)
    STRING          reduce using rule 36 (declaration -> BOOL VARIABLE EOB .)
    VARIABLE        reduce using rule 36 (declaration -> BOOL VARIABLE EOB .)
    IF              reduce using rule 36 (declaration -> BOOL VARIABLE EOB .)
    OP_EXPR_OPEN_PARENTHESIS reduce using rule 36 (declaration -> BOOL VARIABLE EOB .)
    LITERAL         reduce using rule 36 (declaration -> BOOL VARIABLE EOB .)
    NUMERIC         reduce using rule 36 (declaration -> BOOL VARIABLE EOB .)
    BOOLEAN         reduce using rule 36 (declaration -> BOOL VARIABLE EOB .)
    $end            reduce using rule 36 (declaration -> BOOL VARIABLE EOB .)
    ELSE            reduce using rule 36 (declaration -> BOOL VARIABLE EOB .)


state 92

    (18) assignment -> BOOL VARIABLE OP_ATRI_EQUAL . BOOLEAN EOB
    (23) assignment -> BOOL VARIABLE OP_ATRI_EQUAL . VARIABLE EOB

    BOOLEAN         shift and go to state 114
    VARIABLE        shift and go to state 113


state 93

    (37) declaration -> CHARACTER VARIABLE EOB .

    OP_MARK_COMMENT reduce using rule 37 (declaration -> CHARACTER VARIABLE EOB .)
    INT             reduce using rule 37 (declaration -> CHARACTER VARIABLE EOB .)
    DOUBLE          reduce using rule 37 (declaration -> CHARACTER VARIABLE EOB .)
    BOOL            reduce using rule 37 (declaration -> CHARACTER VARIABLE EOB .)
    CHARACTER       reduce using rule 37 (declaration -> CHARACTER VARIABLE EOB .)
    STRING          reduce using rule 37 (declaration -> CHARACTER VARIABLE EOB .)
    VARIABLE        reduce using rule 37 (declaration -> CHARACTER VARIABLE EOB .)
    IF              reduce using rule 37 (declaration -> CHARACTER VARIABLE EOB .)
    OP_EXPR_OPEN_PARENTHESIS reduce using rule 37 (declaration -> CHARACTER VARIABLE EOB .)
    LITERAL         reduce using rule 37 (declaration -> CHARACTER VARIABLE EOB .)
    NUMERIC         reduce using rule 37 (declaration -> CHARACTER VARIABLE EOB .)
    BOOLEAN         reduce using rule 37 (declaration -> CHARACTER VARIABLE EOB .)
    $end            reduce using rule 37 (declaration -> CHARACTER VARIABLE EOB .)
    ELSE            reduce using rule 37 (declaration -> CHARACTER VARIABLE EOB .)


state 94

    (19) assignment -> CHARACTER VARIABLE OP_ATRI_EQUAL . CHAR EOB
    (24) assignment -> CHARACTER VARIABLE OP_ATRI_EQUAL . VARIABLE EOB

    CHAR            shift and go to state 116
    VARIABLE        shift and go to state 115


state 95

    (38) declaration -> STRING VARIABLE EOB .

    OP_MARK_COMMENT reduce using rule 38 (declaration -> STRING VARIABLE EOB .)
    INT             reduce using rule 38 (declaration -> STRING VARIABLE EOB .)
    DOUBLE          reduce using rule 38 (declaration -> STRING VARIABLE EOB .)
    BOOL            reduce using rule 38 (declaration -> STRING VARIABLE EOB .)
    CHARACTER       reduce using rule 38 (declaration -> STRING VARIABLE EOB .)
    STRING          reduce using rule 38 (declaration -> STRING VARIABLE EOB .)
    VARIABLE        reduce using rule 38 (declaration -> STRING VARIABLE EOB .)
    IF              reduce using rule 38 (declaration -> STRING VARIABLE EOB .)
    OP_EXPR_OPEN_PARENTHESIS reduce using rule 38 (declaration -> STRING VARIABLE EOB .)
    LITERAL         reduce using rule 38 (declaration -> STRING VARIABLE EOB .)
    NUMERIC         reduce using rule 38 (declaration -> STRING VARIABLE EOB .)
    BOOLEAN         reduce using rule 38 (declaration -> STRING VARIABLE EOB .)
    $end            reduce using rule 38 (declaration -> STRING VARIABLE EOB .)
    ELSE            reduce using rule 38 (declaration -> STRING VARIABLE EOB .)


state 96

    (20) assignment -> STRING VARIABLE OP_ATRI_EQUAL . LITERAL EOB
    (25) assignment -> STRING VARIABLE OP_ATRI_EQUAL . VARIABLE EOB

    LITERAL         shift and go to state 118
    VARIABLE        shift and go to state 117


state 97

    (11) decision -> IF OP_EXPR_OPEN_PARENTHESIS conditional . OP_EXPR_CLOSE_PARENTHESIS OP_EXEC_COLON statement
    (12) decision -> IF OP_EXPR_OPEN_PARENTHESIS conditional . OP_EXPR_CLOSE_PARENTHESIS OP_EXEC_COLON statement ELSE OP_EXEC_COLON statement

    OP_EXPR_CLOSE_PARENTHESIS shift and go to state 119


state 98

    (44) conditional -> VARIABLE . OP_RELA_LESS NUMERIC
    (45) conditional -> VARIABLE . OP_RELA_LESS BOOLEAN
    (46) conditional -> VARIABLE . OP_RELA_LESS LITERAL
    (47) conditional -> VARIABLE . OP_RELA_LESS CHARACTER
    (48) conditional -> VARIABLE . OP_RELA_LESS VARIABLE
    (49) conditional -> VARIABLE . OP_RELA_BIGGER NUMERIC
    (50) conditional -> VARIABLE . OP_RELA_BIGGER BOOLEAN
    (51) conditional -> VARIABLE . OP_RELA_BIGGER LITERAL
    (52) conditional -> VARIABLE . OP_RELA_BIGGER CHARACTER
    (53) conditional -> VARIABLE . OP_RELA_BIGGER VARIABLE
    (54) conditional -> VARIABLE . OP_RELA_LESS_EQUAL NUMERIC
    (55) conditional -> VARIABLE . OP_RELA_LESS_EQUAL BOOLEAN
    (56) conditional -> VARIABLE . OP_RELA_LESS_EQUAL LITERAL
    (57) conditional -> VARIABLE . OP_RELA_LESS_EQUAL CHARACTER
    (58) conditional -> VARIABLE . OP_RELA_LESS_EQUAL VARIABLE
    (59) conditional -> VARIABLE . OP_RELA_BIGGER_EQUAL NUMERIC
    (60) conditional -> VARIABLE . OP_RELA_BIGGER_EQUAL BOOLEAN
    (61) conditional -> VARIABLE . OP_RELA_BIGGER_EQUAL LITERAL
    (62) conditional -> VARIABLE . OP_RELA_BIGGER_EQUAL CHARACTER
    (63) conditional -> VARIABLE . OP_RELA_BIGGER_EQUAL VARIABLE
    (64) conditional -> VARIABLE . OP_RELA_COMPARE NUMERIC
    (65) conditional -> VARIABLE . OP_RELA_COMPARE BOOLEAN
    (66) conditional -> VARIABLE . OP_RELA_COMPARE LITERAL
    (67) conditional -> VARIABLE . OP_RELA_COMPARE CHARACTER
    (68) conditional -> VARIABLE . OP_RELA_COMPARE VARIABLE
    (69) conditional -> VARIABLE . OP_RELA_DIFFERENTIATE NUMERIC
    (70) conditional -> VARIABLE . OP_RELA_DIFFERENTIATE BOOLEAN
    (71) conditional -> VARIABLE . OP_RELA_DIFFERENTIATE LITERAL
    (72) conditional -> VARIABLE . OP_RELA_DIFFERENTIATE CHARACTER
    (73) conditional -> VARIABLE . OP_RELA_DIFFERENTIATE VARIABLE

    OP_RELA_LESS    shift and go to state 31
    OP_RELA_BIGGER  shift and go to state 32
    OP_RELA_LESS_EQUAL shift and go to state 33
    OP_RELA_BIGGER_EQUAL shift and go to state 34
    OP_RELA_COMPARE shift and go to state 35
    OP_RELA_DIFFERENTIATE shift and go to state 36


state 99

    (13) expression -> OP_EXPR_OPEN_PARENTHESIS conditional OP_EXPR_CLOSE_PARENTHESIS .

    OP_MARK_COMMENT reduce using rule 13 (expression -> OP_EXPR_OPEN_PARENTHESIS conditional OP_EXPR_CLOSE_PARENTHESIS .)
    INT             reduce using rule 13 (expression -> OP_EXPR_OPEN_PARENTHESIS conditional OP_EXPR_CLOSE_PARENTHESIS .)
    DOUBLE          reduce using rule 13 (expression -> OP_EXPR_OPEN_PARENTHESIS conditional OP_EXPR_CLOSE_PARENTHESIS .)
    BOOL            reduce using rule 13 (expression -> OP_EXPR_OPEN_PARENTHESIS conditional OP_EXPR_CLOSE_PARENTHESIS .)
    CHARACTER       reduce using rule 13 (expression -> OP_EXPR_OPEN_PARENTHESIS conditional OP_EXPR_CLOSE_PARENTHESIS .)
    STRING          reduce using rule 13 (expression -> OP_EXPR_OPEN_PARENTHESIS conditional OP_EXPR_CLOSE_PARENTHESIS .)
    VARIABLE        reduce using rule 13 (expression -> OP_EXPR_OPEN_PARENTHESIS conditional OP_EXPR_CLOSE_PARENTHESIS .)
    IF              reduce using rule 13 (expression -> OP_EXPR_OPEN_PARENTHESIS conditional OP_EXPR_CLOSE_PARENTHESIS .)
    OP_EXPR_OPEN_PARENTHESIS reduce using rule 13 (expression -> OP_EXPR_OPEN_PARENTHESIS conditional OP_EXPR_CLOSE_PARENTHESIS .)
    LITERAL         reduce using rule 13 (expression -> OP_EXPR_OPEN_PARENTHESIS conditional OP_EXPR_CLOSE_PARENTHESIS .)
    NUMERIC         reduce using rule 13 (expression -> OP_EXPR_OPEN_PARENTHESIS conditional OP_EXPR_CLOSE_PARENTHESIS .)
    BOOLEAN         reduce using rule 13 (expression -> OP_EXPR_OPEN_PARENTHESIS conditional OP_EXPR_CLOSE_PARENTHESIS .)
    $end            reduce using rule 13 (expression -> OP_EXPR_OPEN_PARENTHESIS conditional OP_EXPR_CLOSE_PARENTHESIS .)
    ELSE            reduce using rule 13 (expression -> OP_EXPR_OPEN_PARENTHESIS conditional OP_EXPR_CLOSE_PARENTHESIS .)


state 100

    (14) expression -> OP_EXPR_OPEN_PARENTHESIS operation OP_EXPR_CLOSE_PARENTHESIS .

    OP_MARK_COMMENT reduce using rule 14 (expression -> OP_EXPR_OPEN_PARENTHESIS operation OP_EXPR_CLOSE_PARENTHESIS .)
    INT             reduce using rule 14 (expression -> OP_EXPR_OPEN_PARENTHESIS operation OP_EXPR_CLOSE_PARENTHESIS .)
    DOUBLE          reduce using rule 14 (expression -> OP_EXPR_OPEN_PARENTHESIS operation OP_EXPR_CLOSE_PARENTHESIS .)
    BOOL            reduce using rule 14 (expression -> OP_EXPR_OPEN_PARENTHESIS operation OP_EXPR_CLOSE_PARENTHESIS .)
    CHARACTER       reduce using rule 14 (expression -> OP_EXPR_OPEN_PARENTHESIS operation OP_EXPR_CLOSE_PARENTHESIS .)
    STRING          reduce using rule 14 (expression -> OP_EXPR_OPEN_PARENTHESIS operation OP_EXPR_CLOSE_PARENTHESIS .)
    VARIABLE        reduce using rule 14 (expression -> OP_EXPR_OPEN_PARENTHESIS operation OP_EXPR_CLOSE_PARENTHESIS .)
    IF              reduce using rule 14 (expression -> OP_EXPR_OPEN_PARENTHESIS operation OP_EXPR_CLOSE_PARENTHESIS .)
    OP_EXPR_OPEN_PARENTHESIS reduce using rule 14 (expression -> OP_EXPR_OPEN_PARENTHESIS operation OP_EXPR_CLOSE_PARENTHESIS .)
    LITERAL         reduce using rule 14 (expression -> OP_EXPR_OPEN_PARENTHESIS operation OP_EXPR_CLOSE_PARENTHESIS .)
    NUMERIC         reduce using rule 14 (expression -> OP_EXPR_OPEN_PARENTHESIS operation OP_EXPR_CLOSE_PARENTHESIS .)
    BOOLEAN         reduce using rule 14 (expression -> OP_EXPR_OPEN_PARENTHESIS operation OP_EXPR_CLOSE_PARENTHESIS .)
    $end            reduce using rule 14 (expression -> OP_EXPR_OPEN_PARENTHESIS operation OP_EXPR_CLOSE_PARENTHESIS .)
    ELSE            reduce using rule 14 (expression -> OP_EXPR_OPEN_PARENTHESIS operation OP_EXPR_CLOSE_PARENTHESIS .)


state 101

    (15) expression -> OP_EXPR_OPEN_PARENTHESIS value OP_EXPR_CLOSE_PARENTHESIS .

    OP_MARK_COMMENT reduce using rule 15 (expression -> OP_EXPR_OPEN_PARENTHESIS value OP_EXPR_CLOSE_PARENTHESIS .)
    INT             reduce using rule 15 (expression -> OP_EXPR_OPEN_PARENTHESIS value OP_EXPR_CLOSE_PARENTHESIS .)
    DOUBLE          reduce using rule 15 (expression -> OP_EXPR_OPEN_PARENTHESIS value OP_EXPR_CLOSE_PARENTHESIS .)
    BOOL            reduce using rule 15 (expression -> OP_EXPR_OPEN_PARENTHESIS value OP_EXPR_CLOSE_PARENTHESIS .)
    CHARACTER       reduce using rule 15 (expression -> OP_EXPR_OPEN_PARENTHESIS value OP_EXPR_CLOSE_PARENTHESIS .)
    STRING          reduce using rule 15 (expression -> OP_EXPR_OPEN_PARENTHESIS value OP_EXPR_CLOSE_PARENTHESIS .)
    VARIABLE        reduce using rule 15 (expression -> OP_EXPR_OPEN_PARENTHESIS value OP_EXPR_CLOSE_PARENTHESIS .)
    IF              reduce using rule 15 (expression -> OP_EXPR_OPEN_PARENTHESIS value OP_EXPR_CLOSE_PARENTHESIS .)
    OP_EXPR_OPEN_PARENTHESIS reduce using rule 15 (expression -> OP_EXPR_OPEN_PARENTHESIS value OP_EXPR_CLOSE_PARENTHESIS .)
    LITERAL         reduce using rule 15 (expression -> OP_EXPR_OPEN_PARENTHESIS value OP_EXPR_CLOSE_PARENTHESIS .)
    NUMERIC         reduce using rule 15 (expression -> OP_EXPR_OPEN_PARENTHESIS value OP_EXPR_CLOSE_PARENTHESIS .)
    BOOLEAN         reduce using rule 15 (expression -> OP_EXPR_OPEN_PARENTHESIS value OP_EXPR_CLOSE_PARENTHESIS .)
    $end            reduce using rule 15 (expression -> OP_EXPR_OPEN_PARENTHESIS value OP_EXPR_CLOSE_PARENTHESIS .)
    ELSE            reduce using rule 15 (expression -> OP_EXPR_OPEN_PARENTHESIS value OP_EXPR_CLOSE_PARENTHESIS .)


state 102

    (21) assignment -> INT VARIABLE OP_ATRI_EQUAL VARIABLE . EOB
    (39) operation -> VARIABLE . OP_MATE_PLUS VARIABLE
    (40) operation -> VARIABLE . OP_MATE_MINUS VARIABLE
    (41) operation -> VARIABLE . OP_MATE_TIMES VARIABLE
    (42) operation -> VARIABLE . OP_MATE_DIVISION VARIABLE
    (43) operation -> VARIABLE . OP_MATE_MODULE VARIABLE

    EOB             shift and go to state 120
    OP_MATE_PLUS    shift and go to state 26
    OP_MATE_MINUS   shift and go to state 27
    OP_MATE_TIMES   shift and go to state 28
    OP_MATE_DIVISION shift and go to state 29
    OP_MATE_MODULE  shift and go to state 30


state 103

    (16) assignment -> INT VARIABLE OP_ATRI_EQUAL NUMERIC . EOB

    EOB             shift and go to state 121


state 104

    (26) assignment -> INT VARIABLE OP_ATRI_EQUAL operation . EOB

    EOB             shift and go to state 122


state 105

    (32) assignment -> VARIABLE OP_ATRI_EQUAL VARIABLE EOB .

    OP_MARK_COMMENT reduce using rule 32 (assignment -> VARIABLE OP_ATRI_EQUAL VARIABLE EOB .)
    INT             reduce using rule 32 (assignment -> VARIABLE OP_ATRI_EQUAL VARIABLE EOB .)
    DOUBLE          reduce using rule 32 (assignment -> VARIABLE OP_ATRI_EQUAL VARIABLE EOB .)
    BOOL            reduce using rule 32 (assignment -> VARIABLE OP_ATRI_EQUAL VARIABLE EOB .)
    CHARACTER       reduce using rule 32 (assignment -> VARIABLE OP_ATRI_EQUAL VARIABLE EOB .)
    STRING          reduce using rule 32 (assignment -> VARIABLE OP_ATRI_EQUAL VARIABLE EOB .)
    VARIABLE        reduce using rule 32 (assignment -> VARIABLE OP_ATRI_EQUAL VARIABLE EOB .)
    IF              reduce using rule 32 (assignment -> VARIABLE OP_ATRI_EQUAL VARIABLE EOB .)
    OP_EXPR_OPEN_PARENTHESIS reduce using rule 32 (assignment -> VARIABLE OP_ATRI_EQUAL VARIABLE EOB .)
    LITERAL         reduce using rule 32 (assignment -> VARIABLE OP_ATRI_EQUAL VARIABLE EOB .)
    NUMERIC         reduce using rule 32 (assignment -> VARIABLE OP_ATRI_EQUAL VARIABLE EOB .)
    BOOLEAN         reduce using rule 32 (assignment -> VARIABLE OP_ATRI_EQUAL VARIABLE EOB .)
    $end            reduce using rule 32 (assignment -> VARIABLE OP_ATRI_EQUAL VARIABLE EOB .)
    ELSE            reduce using rule 32 (assignment -> VARIABLE OP_ATRI_EQUAL VARIABLE EOB .)


state 106

    (28) assignment -> VARIABLE OP_ATRI_EQUAL NUMERIC EOB .

    OP_MARK_COMMENT reduce using rule 28 (assignment -> VARIABLE OP_ATRI_EQUAL NUMERIC EOB .)
    INT             reduce using rule 28 (assignment -> VARIABLE OP_ATRI_EQUAL NUMERIC EOB .)
    DOUBLE          reduce using rule 28 (assignment -> VARIABLE OP_ATRI_EQUAL NUMERIC EOB .)
    BOOL            reduce using rule 28 (assignment -> VARIABLE OP_ATRI_EQUAL NUMERIC EOB .)
    CHARACTER       reduce using rule 28 (assignment -> VARIABLE OP_ATRI_EQUAL NUMERIC EOB .)
    STRING          reduce using rule 28 (assignment -> VARIABLE OP_ATRI_EQUAL NUMERIC EOB .)
    VARIABLE        reduce using rule 28 (assignment -> VARIABLE OP_ATRI_EQUAL NUMERIC EOB .)
    IF              reduce using rule 28 (assignment -> VARIABLE OP_ATRI_EQUAL NUMERIC EOB .)
    OP_EXPR_OPEN_PARENTHESIS reduce using rule 28 (assignment -> VARIABLE OP_ATRI_EQUAL NUMERIC EOB .)
    LITERAL         reduce using rule 28 (assignment -> VARIABLE OP_ATRI_EQUAL NUMERIC EOB .)
    NUMERIC         reduce using rule 28 (assignment -> VARIABLE OP_ATRI_EQUAL NUMERIC EOB .)
    BOOLEAN         reduce using rule 28 (assignment -> VARIABLE OP_ATRI_EQUAL NUMERIC EOB .)
    $end            reduce using rule 28 (assignment -> VARIABLE OP_ATRI_EQUAL NUMERIC EOB .)
    ELSE            reduce using rule 28 (assignment -> VARIABLE OP_ATRI_EQUAL NUMERIC EOB .)


state 107

    (29) assignment -> VARIABLE OP_ATRI_EQUAL BOOLEAN EOB .

    OP_MARK_COMMENT reduce using rule 29 (assignment -> VARIABLE OP_ATRI_EQUAL BOOLEAN EOB .)
    INT             reduce using rule 29 (assignment -> VARIABLE OP_ATRI_EQUAL BOOLEAN EOB .)
    DOUBLE          reduce using rule 29 (assignment -> VARIABLE OP_ATRI_EQUAL BOOLEAN EOB .)
    BOOL            reduce using rule 29 (assignment -> VARIABLE OP_ATRI_EQUAL BOOLEAN EOB .)
    CHARACTER       reduce using rule 29 (assignment -> VARIABLE OP_ATRI_EQUAL BOOLEAN EOB .)
    STRING          reduce using rule 29 (assignment -> VARIABLE OP_ATRI_EQUAL BOOLEAN EOB .)
    VARIABLE        reduce using rule 29 (assignment -> VARIABLE OP_ATRI_EQUAL BOOLEAN EOB .)
    IF              reduce using rule 29 (assignment -> VARIABLE OP_ATRI_EQUAL BOOLEAN EOB .)
    OP_EXPR_OPEN_PARENTHESIS reduce using rule 29 (assignment -> VARIABLE OP_ATRI_EQUAL BOOLEAN EOB .)
    LITERAL         reduce using rule 29 (assignment -> VARIABLE OP_ATRI_EQUAL BOOLEAN EOB .)
    NUMERIC         reduce using rule 29 (assignment -> VARIABLE OP_ATRI_EQUAL BOOLEAN EOB .)
    BOOLEAN         reduce using rule 29 (assignment -> VARIABLE OP_ATRI_EQUAL BOOLEAN EOB .)
    $end            reduce using rule 29 (assignment -> VARIABLE OP_ATRI_EQUAL BOOLEAN EOB .)
    ELSE            reduce using rule 29 (assignment -> VARIABLE OP_ATRI_EQUAL BOOLEAN EOB .)


state 108

    (30) assignment -> VARIABLE OP_ATRI_EQUAL CHARACTER EOB .

    OP_MARK_COMMENT reduce using rule 30 (assignment -> VARIABLE OP_ATRI_EQUAL CHARACTER EOB .)
    INT             reduce using rule 30 (assignment -> VARIABLE OP_ATRI_EQUAL CHARACTER EOB .)
    DOUBLE          reduce using rule 30 (assignment -> VARIABLE OP_ATRI_EQUAL CHARACTER EOB .)
    BOOL            reduce using rule 30 (assignment -> VARIABLE OP_ATRI_EQUAL CHARACTER EOB .)
    CHARACTER       reduce using rule 30 (assignment -> VARIABLE OP_ATRI_EQUAL CHARACTER EOB .)
    STRING          reduce using rule 30 (assignment -> VARIABLE OP_ATRI_EQUAL CHARACTER EOB .)
    VARIABLE        reduce using rule 30 (assignment -> VARIABLE OP_ATRI_EQUAL CHARACTER EOB .)
    IF              reduce using rule 30 (assignment -> VARIABLE OP_ATRI_EQUAL CHARACTER EOB .)
    OP_EXPR_OPEN_PARENTHESIS reduce using rule 30 (assignment -> VARIABLE OP_ATRI_EQUAL CHARACTER EOB .)
    LITERAL         reduce using rule 30 (assignment -> VARIABLE OP_ATRI_EQUAL CHARACTER EOB .)
    NUMERIC         reduce using rule 30 (assignment -> VARIABLE OP_ATRI_EQUAL CHARACTER EOB .)
    BOOLEAN         reduce using rule 30 (assignment -> VARIABLE OP_ATRI_EQUAL CHARACTER EOB .)
    $end            reduce using rule 30 (assignment -> VARIABLE OP_ATRI_EQUAL CHARACTER EOB .)
    ELSE            reduce using rule 30 (assignment -> VARIABLE OP_ATRI_EQUAL CHARACTER EOB .)


state 109

    (31) assignment -> VARIABLE OP_ATRI_EQUAL LITERAL EOB .

    OP_MARK_COMMENT reduce using rule 31 (assignment -> VARIABLE OP_ATRI_EQUAL LITERAL EOB .)
    INT             reduce using rule 31 (assignment -> VARIABLE OP_ATRI_EQUAL LITERAL EOB .)
    DOUBLE          reduce using rule 31 (assignment -> VARIABLE OP_ATRI_EQUAL LITERAL EOB .)
    BOOL            reduce using rule 31 (assignment -> VARIABLE OP_ATRI_EQUAL LITERAL EOB .)
    CHARACTER       reduce using rule 31 (assignment -> VARIABLE OP_ATRI_EQUAL LITERAL EOB .)
    STRING          reduce using rule 31 (assignment -> VARIABLE OP_ATRI_EQUAL LITERAL EOB .)
    VARIABLE        reduce using rule 31 (assignment -> VARIABLE OP_ATRI_EQUAL LITERAL EOB .)
    IF              reduce using rule 31 (assignment -> VARIABLE OP_ATRI_EQUAL LITERAL EOB .)
    OP_EXPR_OPEN_PARENTHESIS reduce using rule 31 (assignment -> VARIABLE OP_ATRI_EQUAL LITERAL EOB .)
    LITERAL         reduce using rule 31 (assignment -> VARIABLE OP_ATRI_EQUAL LITERAL EOB .)
    NUMERIC         reduce using rule 31 (assignment -> VARIABLE OP_ATRI_EQUAL LITERAL EOB .)
    BOOLEAN         reduce using rule 31 (assignment -> VARIABLE OP_ATRI_EQUAL LITERAL EOB .)
    $end            reduce using rule 31 (assignment -> VARIABLE OP_ATRI_EQUAL LITERAL EOB .)
    ELSE            reduce using rule 31 (assignment -> VARIABLE OP_ATRI_EQUAL LITERAL EOB .)


state 110

    (22) assignment -> DOUBLE VARIABLE OP_ATRI_EQUAL VARIABLE . EOB
    (39) operation -> VARIABLE . OP_MATE_PLUS VARIABLE
    (40) operation -> VARIABLE . OP_MATE_MINUS VARIABLE
    (41) operation -> VARIABLE . OP_MATE_TIMES VARIABLE
    (42) operation -> VARIABLE . OP_MATE_DIVISION VARIABLE
    (43) operation -> VARIABLE . OP_MATE_MODULE VARIABLE

    EOB             shift and go to state 123
    OP_MATE_PLUS    shift and go to state 26
    OP_MATE_MINUS   shift and go to state 27
    OP_MATE_TIMES   shift and go to state 28
    OP_MATE_DIVISION shift and go to state 29
    OP_MATE_MODULE  shift and go to state 30


state 111

    (17) assignment -> DOUBLE VARIABLE OP_ATRI_EQUAL NUMERIC . EOB

    EOB             shift and go to state 124


state 112

    (27) assignment -> DOUBLE VARIABLE OP_ATRI_EQUAL operation . EOB

    EOB             shift and go to state 125


state 113

    (23) assignment -> BOOL VARIABLE OP_ATRI_EQUAL VARIABLE . EOB

    EOB             shift and go to state 126


state 114

    (18) assignment -> BOOL VARIABLE OP_ATRI_EQUAL BOOLEAN . EOB

    EOB             shift and go to state 127


state 115

    (24) assignment -> CHARACTER VARIABLE OP_ATRI_EQUAL VARIABLE . EOB

    EOB             shift and go to state 128


state 116

    (19) assignment -> CHARACTER VARIABLE OP_ATRI_EQUAL CHAR . EOB

    EOB             shift and go to state 129


state 117

    (25) assignment -> STRING VARIABLE OP_ATRI_EQUAL VARIABLE . EOB

    EOB             shift and go to state 130


state 118

    (20) assignment -> STRING VARIABLE OP_ATRI_EQUAL LITERAL . EOB

    EOB             shift and go to state 131


state 119

    (11) decision -> IF OP_EXPR_OPEN_PARENTHESIS conditional OP_EXPR_CLOSE_PARENTHESIS . OP_EXEC_COLON statement
    (12) decision -> IF OP_EXPR_OPEN_PARENTHESIS conditional OP_EXPR_CLOSE_PARENTHESIS . OP_EXEC_COLON statement ELSE OP_EXEC_COLON statement

    OP_EXEC_COLON   shift and go to state 132


state 120

    (21) assignment -> INT VARIABLE OP_ATRI_EQUAL VARIABLE EOB .

    OP_MARK_COMMENT reduce using rule 21 (assignment -> INT VARIABLE OP_ATRI_EQUAL VARIABLE EOB .)
    INT             reduce using rule 21 (assignment -> INT VARIABLE OP_ATRI_EQUAL VARIABLE EOB .)
    DOUBLE          reduce using rule 21 (assignment -> INT VARIABLE OP_ATRI_EQUAL VARIABLE EOB .)
    BOOL            reduce using rule 21 (assignment -> INT VARIABLE OP_ATRI_EQUAL VARIABLE EOB .)
    CHARACTER       reduce using rule 21 (assignment -> INT VARIABLE OP_ATRI_EQUAL VARIABLE EOB .)
    STRING          reduce using rule 21 (assignment -> INT VARIABLE OP_ATRI_EQUAL VARIABLE EOB .)
    VARIABLE        reduce using rule 21 (assignment -> INT VARIABLE OP_ATRI_EQUAL VARIABLE EOB .)
    IF              reduce using rule 21 (assignment -> INT VARIABLE OP_ATRI_EQUAL VARIABLE EOB .)
    OP_EXPR_OPEN_PARENTHESIS reduce using rule 21 (assignment -> INT VARIABLE OP_ATRI_EQUAL VARIABLE EOB .)
    LITERAL         reduce using rule 21 (assignment -> INT VARIABLE OP_ATRI_EQUAL VARIABLE EOB .)
    NUMERIC         reduce using rule 21 (assignment -> INT VARIABLE OP_ATRI_EQUAL VARIABLE EOB .)
    BOOLEAN         reduce using rule 21 (assignment -> INT VARIABLE OP_ATRI_EQUAL VARIABLE EOB .)
    $end            reduce using rule 21 (assignment -> INT VARIABLE OP_ATRI_EQUAL VARIABLE EOB .)
    ELSE            reduce using rule 21 (assignment -> INT VARIABLE OP_ATRI_EQUAL VARIABLE EOB .)


state 121

    (16) assignment -> INT VARIABLE OP_ATRI_EQUAL NUMERIC EOB .

    OP_MARK_COMMENT reduce using rule 16 (assignment -> INT VARIABLE OP_ATRI_EQUAL NUMERIC EOB .)
    INT             reduce using rule 16 (assignment -> INT VARIABLE OP_ATRI_EQUAL NUMERIC EOB .)
    DOUBLE          reduce using rule 16 (assignment -> INT VARIABLE OP_ATRI_EQUAL NUMERIC EOB .)
    BOOL            reduce using rule 16 (assignment -> INT VARIABLE OP_ATRI_EQUAL NUMERIC EOB .)
    CHARACTER       reduce using rule 16 (assignment -> INT VARIABLE OP_ATRI_EQUAL NUMERIC EOB .)
    STRING          reduce using rule 16 (assignment -> INT VARIABLE OP_ATRI_EQUAL NUMERIC EOB .)
    VARIABLE        reduce using rule 16 (assignment -> INT VARIABLE OP_ATRI_EQUAL NUMERIC EOB .)
    IF              reduce using rule 16 (assignment -> INT VARIABLE OP_ATRI_EQUAL NUMERIC EOB .)
    OP_EXPR_OPEN_PARENTHESIS reduce using rule 16 (assignment -> INT VARIABLE OP_ATRI_EQUAL NUMERIC EOB .)
    LITERAL         reduce using rule 16 (assignment -> INT VARIABLE OP_ATRI_EQUAL NUMERIC EOB .)
    NUMERIC         reduce using rule 16 (assignment -> INT VARIABLE OP_ATRI_EQUAL NUMERIC EOB .)
    BOOLEAN         reduce using rule 16 (assignment -> INT VARIABLE OP_ATRI_EQUAL NUMERIC EOB .)
    $end            reduce using rule 16 (assignment -> INT VARIABLE OP_ATRI_EQUAL NUMERIC EOB .)
    ELSE            reduce using rule 16 (assignment -> INT VARIABLE OP_ATRI_EQUAL NUMERIC EOB .)


state 122

    (26) assignment -> INT VARIABLE OP_ATRI_EQUAL operation EOB .

    OP_MARK_COMMENT reduce using rule 26 (assignment -> INT VARIABLE OP_ATRI_EQUAL operation EOB .)
    INT             reduce using rule 26 (assignment -> INT VARIABLE OP_ATRI_EQUAL operation EOB .)
    DOUBLE          reduce using rule 26 (assignment -> INT VARIABLE OP_ATRI_EQUAL operation EOB .)
    BOOL            reduce using rule 26 (assignment -> INT VARIABLE OP_ATRI_EQUAL operation EOB .)
    CHARACTER       reduce using rule 26 (assignment -> INT VARIABLE OP_ATRI_EQUAL operation EOB .)
    STRING          reduce using rule 26 (assignment -> INT VARIABLE OP_ATRI_EQUAL operation EOB .)
    VARIABLE        reduce using rule 26 (assignment -> INT VARIABLE OP_ATRI_EQUAL operation EOB .)
    IF              reduce using rule 26 (assignment -> INT VARIABLE OP_ATRI_EQUAL operation EOB .)
    OP_EXPR_OPEN_PARENTHESIS reduce using rule 26 (assignment -> INT VARIABLE OP_ATRI_EQUAL operation EOB .)
    LITERAL         reduce using rule 26 (assignment -> INT VARIABLE OP_ATRI_EQUAL operation EOB .)
    NUMERIC         reduce using rule 26 (assignment -> INT VARIABLE OP_ATRI_EQUAL operation EOB .)
    BOOLEAN         reduce using rule 26 (assignment -> INT VARIABLE OP_ATRI_EQUAL operation EOB .)
    $end            reduce using rule 26 (assignment -> INT VARIABLE OP_ATRI_EQUAL operation EOB .)
    ELSE            reduce using rule 26 (assignment -> INT VARIABLE OP_ATRI_EQUAL operation EOB .)


state 123

    (22) assignment -> DOUBLE VARIABLE OP_ATRI_EQUAL VARIABLE EOB .

    OP_MARK_COMMENT reduce using rule 22 (assignment -> DOUBLE VARIABLE OP_ATRI_EQUAL VARIABLE EOB .)
    INT             reduce using rule 22 (assignment -> DOUBLE VARIABLE OP_ATRI_EQUAL VARIABLE EOB .)
    DOUBLE          reduce using rule 22 (assignment -> DOUBLE VARIABLE OP_ATRI_EQUAL VARIABLE EOB .)
    BOOL            reduce using rule 22 (assignment -> DOUBLE VARIABLE OP_ATRI_EQUAL VARIABLE EOB .)
    CHARACTER       reduce using rule 22 (assignment -> DOUBLE VARIABLE OP_ATRI_EQUAL VARIABLE EOB .)
    STRING          reduce using rule 22 (assignment -> DOUBLE VARIABLE OP_ATRI_EQUAL VARIABLE EOB .)
    VARIABLE        reduce using rule 22 (assignment -> DOUBLE VARIABLE OP_ATRI_EQUAL VARIABLE EOB .)
    IF              reduce using rule 22 (assignment -> DOUBLE VARIABLE OP_ATRI_EQUAL VARIABLE EOB .)
    OP_EXPR_OPEN_PARENTHESIS reduce using rule 22 (assignment -> DOUBLE VARIABLE OP_ATRI_EQUAL VARIABLE EOB .)
    LITERAL         reduce using rule 22 (assignment -> DOUBLE VARIABLE OP_ATRI_EQUAL VARIABLE EOB .)
    NUMERIC         reduce using rule 22 (assignment -> DOUBLE VARIABLE OP_ATRI_EQUAL VARIABLE EOB .)
    BOOLEAN         reduce using rule 22 (assignment -> DOUBLE VARIABLE OP_ATRI_EQUAL VARIABLE EOB .)
    $end            reduce using rule 22 (assignment -> DOUBLE VARIABLE OP_ATRI_EQUAL VARIABLE EOB .)
    ELSE            reduce using rule 22 (assignment -> DOUBLE VARIABLE OP_ATRI_EQUAL VARIABLE EOB .)


state 124

    (17) assignment -> DOUBLE VARIABLE OP_ATRI_EQUAL NUMERIC EOB .

    OP_MARK_COMMENT reduce using rule 17 (assignment -> DOUBLE VARIABLE OP_ATRI_EQUAL NUMERIC EOB .)
    INT             reduce using rule 17 (assignment -> DOUBLE VARIABLE OP_ATRI_EQUAL NUMERIC EOB .)
    DOUBLE          reduce using rule 17 (assignment -> DOUBLE VARIABLE OP_ATRI_EQUAL NUMERIC EOB .)
    BOOL            reduce using rule 17 (assignment -> DOUBLE VARIABLE OP_ATRI_EQUAL NUMERIC EOB .)
    CHARACTER       reduce using rule 17 (assignment -> DOUBLE VARIABLE OP_ATRI_EQUAL NUMERIC EOB .)
    STRING          reduce using rule 17 (assignment -> DOUBLE VARIABLE OP_ATRI_EQUAL NUMERIC EOB .)
    VARIABLE        reduce using rule 17 (assignment -> DOUBLE VARIABLE OP_ATRI_EQUAL NUMERIC EOB .)
    IF              reduce using rule 17 (assignment -> DOUBLE VARIABLE OP_ATRI_EQUAL NUMERIC EOB .)
    OP_EXPR_OPEN_PARENTHESIS reduce using rule 17 (assignment -> DOUBLE VARIABLE OP_ATRI_EQUAL NUMERIC EOB .)
    LITERAL         reduce using rule 17 (assignment -> DOUBLE VARIABLE OP_ATRI_EQUAL NUMERIC EOB .)
    NUMERIC         reduce using rule 17 (assignment -> DOUBLE VARIABLE OP_ATRI_EQUAL NUMERIC EOB .)
    BOOLEAN         reduce using rule 17 (assignment -> DOUBLE VARIABLE OP_ATRI_EQUAL NUMERIC EOB .)
    $end            reduce using rule 17 (assignment -> DOUBLE VARIABLE OP_ATRI_EQUAL NUMERIC EOB .)
    ELSE            reduce using rule 17 (assignment -> DOUBLE VARIABLE OP_ATRI_EQUAL NUMERIC EOB .)


state 125

    (27) assignment -> DOUBLE VARIABLE OP_ATRI_EQUAL operation EOB .

    OP_MARK_COMMENT reduce using rule 27 (assignment -> DOUBLE VARIABLE OP_ATRI_EQUAL operation EOB .)
    INT             reduce using rule 27 (assignment -> DOUBLE VARIABLE OP_ATRI_EQUAL operation EOB .)
    DOUBLE          reduce using rule 27 (assignment -> DOUBLE VARIABLE OP_ATRI_EQUAL operation EOB .)
    BOOL            reduce using rule 27 (assignment -> DOUBLE VARIABLE OP_ATRI_EQUAL operation EOB .)
    CHARACTER       reduce using rule 27 (assignment -> DOUBLE VARIABLE OP_ATRI_EQUAL operation EOB .)
    STRING          reduce using rule 27 (assignment -> DOUBLE VARIABLE OP_ATRI_EQUAL operation EOB .)
    VARIABLE        reduce using rule 27 (assignment -> DOUBLE VARIABLE OP_ATRI_EQUAL operation EOB .)
    IF              reduce using rule 27 (assignment -> DOUBLE VARIABLE OP_ATRI_EQUAL operation EOB .)
    OP_EXPR_OPEN_PARENTHESIS reduce using rule 27 (assignment -> DOUBLE VARIABLE OP_ATRI_EQUAL operation EOB .)
    LITERAL         reduce using rule 27 (assignment -> DOUBLE VARIABLE OP_ATRI_EQUAL operation EOB .)
    NUMERIC         reduce using rule 27 (assignment -> DOUBLE VARIABLE OP_ATRI_EQUAL operation EOB .)
    BOOLEAN         reduce using rule 27 (assignment -> DOUBLE VARIABLE OP_ATRI_EQUAL operation EOB .)
    $end            reduce using rule 27 (assignment -> DOUBLE VARIABLE OP_ATRI_EQUAL operation EOB .)
    ELSE            reduce using rule 27 (assignment -> DOUBLE VARIABLE OP_ATRI_EQUAL operation EOB .)


state 126

    (23) assignment -> BOOL VARIABLE OP_ATRI_EQUAL VARIABLE EOB .

    OP_MARK_COMMENT reduce using rule 23 (assignment -> BOOL VARIABLE OP_ATRI_EQUAL VARIABLE EOB .)
    INT             reduce using rule 23 (assignment -> BOOL VARIABLE OP_ATRI_EQUAL VARIABLE EOB .)
    DOUBLE          reduce using rule 23 (assignment -> BOOL VARIABLE OP_ATRI_EQUAL VARIABLE EOB .)
    BOOL            reduce using rule 23 (assignment -> BOOL VARIABLE OP_ATRI_EQUAL VARIABLE EOB .)
    CHARACTER       reduce using rule 23 (assignment -> BOOL VARIABLE OP_ATRI_EQUAL VARIABLE EOB .)
    STRING          reduce using rule 23 (assignment -> BOOL VARIABLE OP_ATRI_EQUAL VARIABLE EOB .)
    VARIABLE        reduce using rule 23 (assignment -> BOOL VARIABLE OP_ATRI_EQUAL VARIABLE EOB .)
    IF              reduce using rule 23 (assignment -> BOOL VARIABLE OP_ATRI_EQUAL VARIABLE EOB .)
    OP_EXPR_OPEN_PARENTHESIS reduce using rule 23 (assignment -> BOOL VARIABLE OP_ATRI_EQUAL VARIABLE EOB .)
    LITERAL         reduce using rule 23 (assignment -> BOOL VARIABLE OP_ATRI_EQUAL VARIABLE EOB .)
    NUMERIC         reduce using rule 23 (assignment -> BOOL VARIABLE OP_ATRI_EQUAL VARIABLE EOB .)
    BOOLEAN         reduce using rule 23 (assignment -> BOOL VARIABLE OP_ATRI_EQUAL VARIABLE EOB .)
    $end            reduce using rule 23 (assignment -> BOOL VARIABLE OP_ATRI_EQUAL VARIABLE EOB .)
    ELSE            reduce using rule 23 (assignment -> BOOL VARIABLE OP_ATRI_EQUAL VARIABLE EOB .)


state 127

    (18) assignment -> BOOL VARIABLE OP_ATRI_EQUAL BOOLEAN EOB .

    OP_MARK_COMMENT reduce using rule 18 (assignment -> BOOL VARIABLE OP_ATRI_EQUAL BOOLEAN EOB .)
    INT             reduce using rule 18 (assignment -> BOOL VARIABLE OP_ATRI_EQUAL BOOLEAN EOB .)
    DOUBLE          reduce using rule 18 (assignment -> BOOL VARIABLE OP_ATRI_EQUAL BOOLEAN EOB .)
    BOOL            reduce using rule 18 (assignment -> BOOL VARIABLE OP_ATRI_EQUAL BOOLEAN EOB .)
    CHARACTER       reduce using rule 18 (assignment -> BOOL VARIABLE OP_ATRI_EQUAL BOOLEAN EOB .)
    STRING          reduce using rule 18 (assignment -> BOOL VARIABLE OP_ATRI_EQUAL BOOLEAN EOB .)
    VARIABLE        reduce using rule 18 (assignment -> BOOL VARIABLE OP_ATRI_EQUAL BOOLEAN EOB .)
    IF              reduce using rule 18 (assignment -> BOOL VARIABLE OP_ATRI_EQUAL BOOLEAN EOB .)
    OP_EXPR_OPEN_PARENTHESIS reduce using rule 18 (assignment -> BOOL VARIABLE OP_ATRI_EQUAL BOOLEAN EOB .)
    LITERAL         reduce using rule 18 (assignment -> BOOL VARIABLE OP_ATRI_EQUAL BOOLEAN EOB .)
    NUMERIC         reduce using rule 18 (assignment -> BOOL VARIABLE OP_ATRI_EQUAL BOOLEAN EOB .)
    BOOLEAN         reduce using rule 18 (assignment -> BOOL VARIABLE OP_ATRI_EQUAL BOOLEAN EOB .)
    $end            reduce using rule 18 (assignment -> BOOL VARIABLE OP_ATRI_EQUAL BOOLEAN EOB .)
    ELSE            reduce using rule 18 (assignment -> BOOL VARIABLE OP_ATRI_EQUAL BOOLEAN EOB .)


state 128

    (24) assignment -> CHARACTER VARIABLE OP_ATRI_EQUAL VARIABLE EOB .

    OP_MARK_COMMENT reduce using rule 24 (assignment -> CHARACTER VARIABLE OP_ATRI_EQUAL VARIABLE EOB .)
    INT             reduce using rule 24 (assignment -> CHARACTER VARIABLE OP_ATRI_EQUAL VARIABLE EOB .)
    DOUBLE          reduce using rule 24 (assignment -> CHARACTER VARIABLE OP_ATRI_EQUAL VARIABLE EOB .)
    BOOL            reduce using rule 24 (assignment -> CHARACTER VARIABLE OP_ATRI_EQUAL VARIABLE EOB .)
    CHARACTER       reduce using rule 24 (assignment -> CHARACTER VARIABLE OP_ATRI_EQUAL VARIABLE EOB .)
    STRING          reduce using rule 24 (assignment -> CHARACTER VARIABLE OP_ATRI_EQUAL VARIABLE EOB .)
    VARIABLE        reduce using rule 24 (assignment -> CHARACTER VARIABLE OP_ATRI_EQUAL VARIABLE EOB .)
    IF              reduce using rule 24 (assignment -> CHARACTER VARIABLE OP_ATRI_EQUAL VARIABLE EOB .)
    OP_EXPR_OPEN_PARENTHESIS reduce using rule 24 (assignment -> CHARACTER VARIABLE OP_ATRI_EQUAL VARIABLE EOB .)
    LITERAL         reduce using rule 24 (assignment -> CHARACTER VARIABLE OP_ATRI_EQUAL VARIABLE EOB .)
    NUMERIC         reduce using rule 24 (assignment -> CHARACTER VARIABLE OP_ATRI_EQUAL VARIABLE EOB .)
    BOOLEAN         reduce using rule 24 (assignment -> CHARACTER VARIABLE OP_ATRI_EQUAL VARIABLE EOB .)
    $end            reduce using rule 24 (assignment -> CHARACTER VARIABLE OP_ATRI_EQUAL VARIABLE EOB .)
    ELSE            reduce using rule 24 (assignment -> CHARACTER VARIABLE OP_ATRI_EQUAL VARIABLE EOB .)


state 129

    (19) assignment -> CHARACTER VARIABLE OP_ATRI_EQUAL CHAR EOB .

    OP_MARK_COMMENT reduce using rule 19 (assignment -> CHARACTER VARIABLE OP_ATRI_EQUAL CHAR EOB .)
    INT             reduce using rule 19 (assignment -> CHARACTER VARIABLE OP_ATRI_EQUAL CHAR EOB .)
    DOUBLE          reduce using rule 19 (assignment -> CHARACTER VARIABLE OP_ATRI_EQUAL CHAR EOB .)
    BOOL            reduce using rule 19 (assignment -> CHARACTER VARIABLE OP_ATRI_EQUAL CHAR EOB .)
    CHARACTER       reduce using rule 19 (assignment -> CHARACTER VARIABLE OP_ATRI_EQUAL CHAR EOB .)
    STRING          reduce using rule 19 (assignment -> CHARACTER VARIABLE OP_ATRI_EQUAL CHAR EOB .)
    VARIABLE        reduce using rule 19 (assignment -> CHARACTER VARIABLE OP_ATRI_EQUAL CHAR EOB .)
    IF              reduce using rule 19 (assignment -> CHARACTER VARIABLE OP_ATRI_EQUAL CHAR EOB .)
    OP_EXPR_OPEN_PARENTHESIS reduce using rule 19 (assignment -> CHARACTER VARIABLE OP_ATRI_EQUAL CHAR EOB .)
    LITERAL         reduce using rule 19 (assignment -> CHARACTER VARIABLE OP_ATRI_EQUAL CHAR EOB .)
    NUMERIC         reduce using rule 19 (assignment -> CHARACTER VARIABLE OP_ATRI_EQUAL CHAR EOB .)
    BOOLEAN         reduce using rule 19 (assignment -> CHARACTER VARIABLE OP_ATRI_EQUAL CHAR EOB .)
    $end            reduce using rule 19 (assignment -> CHARACTER VARIABLE OP_ATRI_EQUAL CHAR EOB .)
    ELSE            reduce using rule 19 (assignment -> CHARACTER VARIABLE OP_ATRI_EQUAL CHAR EOB .)


state 130

    (25) assignment -> STRING VARIABLE OP_ATRI_EQUAL VARIABLE EOB .

    OP_MARK_COMMENT reduce using rule 25 (assignment -> STRING VARIABLE OP_ATRI_EQUAL VARIABLE EOB .)
    INT             reduce using rule 25 (assignment -> STRING VARIABLE OP_ATRI_EQUAL VARIABLE EOB .)
    DOUBLE          reduce using rule 25 (assignment -> STRING VARIABLE OP_ATRI_EQUAL VARIABLE EOB .)
    BOOL            reduce using rule 25 (assignment -> STRING VARIABLE OP_ATRI_EQUAL VARIABLE EOB .)
    CHARACTER       reduce using rule 25 (assignment -> STRING VARIABLE OP_ATRI_EQUAL VARIABLE EOB .)
    STRING          reduce using rule 25 (assignment -> STRING VARIABLE OP_ATRI_EQUAL VARIABLE EOB .)
    VARIABLE        reduce using rule 25 (assignment -> STRING VARIABLE OP_ATRI_EQUAL VARIABLE EOB .)
    IF              reduce using rule 25 (assignment -> STRING VARIABLE OP_ATRI_EQUAL VARIABLE EOB .)
    OP_EXPR_OPEN_PARENTHESIS reduce using rule 25 (assignment -> STRING VARIABLE OP_ATRI_EQUAL VARIABLE EOB .)
    LITERAL         reduce using rule 25 (assignment -> STRING VARIABLE OP_ATRI_EQUAL VARIABLE EOB .)
    NUMERIC         reduce using rule 25 (assignment -> STRING VARIABLE OP_ATRI_EQUAL VARIABLE EOB .)
    BOOLEAN         reduce using rule 25 (assignment -> STRING VARIABLE OP_ATRI_EQUAL VARIABLE EOB .)
    $end            reduce using rule 25 (assignment -> STRING VARIABLE OP_ATRI_EQUAL VARIABLE EOB .)
    ELSE            reduce using rule 25 (assignment -> STRING VARIABLE OP_ATRI_EQUAL VARIABLE EOB .)


state 131

    (20) assignment -> STRING VARIABLE OP_ATRI_EQUAL LITERAL EOB .

    OP_MARK_COMMENT reduce using rule 20 (assignment -> STRING VARIABLE OP_ATRI_EQUAL LITERAL EOB .)
    INT             reduce using rule 20 (assignment -> STRING VARIABLE OP_ATRI_EQUAL LITERAL EOB .)
    DOUBLE          reduce using rule 20 (assignment -> STRING VARIABLE OP_ATRI_EQUAL LITERAL EOB .)
    BOOL            reduce using rule 20 (assignment -> STRING VARIABLE OP_ATRI_EQUAL LITERAL EOB .)
    CHARACTER       reduce using rule 20 (assignment -> STRING VARIABLE OP_ATRI_EQUAL LITERAL EOB .)
    STRING          reduce using rule 20 (assignment -> STRING VARIABLE OP_ATRI_EQUAL LITERAL EOB .)
    VARIABLE        reduce using rule 20 (assignment -> STRING VARIABLE OP_ATRI_EQUAL LITERAL EOB .)
    IF              reduce using rule 20 (assignment -> STRING VARIABLE OP_ATRI_EQUAL LITERAL EOB .)
    OP_EXPR_OPEN_PARENTHESIS reduce using rule 20 (assignment -> STRING VARIABLE OP_ATRI_EQUAL LITERAL EOB .)
    LITERAL         reduce using rule 20 (assignment -> STRING VARIABLE OP_ATRI_EQUAL LITERAL EOB .)
    NUMERIC         reduce using rule 20 (assignment -> STRING VARIABLE OP_ATRI_EQUAL LITERAL EOB .)
    BOOLEAN         reduce using rule 20 (assignment -> STRING VARIABLE OP_ATRI_EQUAL LITERAL EOB .)
    $end            reduce using rule 20 (assignment -> STRING VARIABLE OP_ATRI_EQUAL LITERAL EOB .)
    ELSE            reduce using rule 20 (assignment -> STRING VARIABLE OP_ATRI_EQUAL LITERAL EOB .)


state 132

    (11) decision -> IF OP_EXPR_OPEN_PARENTHESIS conditional OP_EXPR_CLOSE_PARENTHESIS OP_EXEC_COLON . statement
    (12) decision -> IF OP_EXPR_OPEN_PARENTHESIS conditional OP_EXPR_CLOSE_PARENTHESIS OP_EXEC_COLON . statement ELSE OP_EXEC_COLON statement
    (3) statement -> . comment
    (4) statement -> . declaration
    (5) statement -> . assignment
    (6) statement -> . decision
    (7) statement -> . expression
    (8) statement -> . operation
    (9) statement -> . conditional
    (10) statement -> . value
    (33) comment -> . OP_MARK_COMMENT
    (34) declaration -> . INT VARIABLE EOB
    (35) declaration -> . DOUBLE VARIABLE EOB
    (36) declaration -> . BOOL VARIABLE EOB
    (37) declaration -> . CHARACTER VARIABLE EOB
    (38) declaration -> . STRING VARIABLE EOB
    (16) assignment -> . INT VARIABLE OP_ATRI_EQUAL NUMERIC EOB
    (17) assignment -> . DOUBLE VARIABLE OP_ATRI_EQUAL NUMERIC EOB
    (18) assignment -> . BOOL VARIABLE OP_ATRI_EQUAL BOOLEAN EOB
    (19) assignment -> . CHARACTER VARIABLE OP_ATRI_EQUAL CHAR EOB
    (20) assignment -> . STRING VARIABLE OP_ATRI_EQUAL LITERAL EOB
    (21) assignment -> . INT VARIABLE OP_ATRI_EQUAL VARIABLE EOB
    (22) assignment -> . DOUBLE VARIABLE OP_ATRI_EQUAL VARIABLE EOB
    (23) assignment -> . BOOL VARIABLE OP_ATRI_EQUAL VARIABLE EOB
    (24) assignment -> . CHARACTER VARIABLE OP_ATRI_EQUAL VARIABLE EOB
    (25) assignment -> . STRING VARIABLE OP_ATRI_EQUAL VARIABLE EOB
    (26) assignment -> . INT VARIABLE OP_ATRI_EQUAL operation EOB
    (27) assignment -> . DOUBLE VARIABLE OP_ATRI_EQUAL operation EOB
    (28) assignment -> . VARIABLE OP_ATRI_EQUAL NUMERIC EOB
    (29) assignment -> . VARIABLE OP_ATRI_EQUAL BOOLEAN EOB
    (30) assignment -> . VARIABLE OP_ATRI_EQUAL CHARACTER EOB
    (31) assignment -> . VARIABLE OP_ATRI_EQUAL LITERAL EOB
    (32) assignment -> . VARIABLE OP_ATRI_EQUAL VARIABLE EOB
    (11) decision -> . IF OP_EXPR_OPEN_PARENTHESIS conditional OP_EXPR_CLOSE_PARENTHESIS OP_EXEC_COLON statement
    (12) decision -> . IF OP_EXPR_OPEN_PARENTHESIS conditional OP_EXPR_CLOSE_PARENTHESIS OP_EXEC_COLON statement ELSE OP_EXEC_COLON statement
    (13) expression -> . OP_EXPR_OPEN_PARENTHESIS conditional OP_EXPR_CLOSE_PARENTHESIS
    (14) expression -> . OP_EXPR_OPEN_PARENTHESIS operation OP_EXPR_CLOSE_PARENTHESIS
    (15) expression -> . OP_EXPR_OPEN_PARENTHESIS value OP_EXPR_CLOSE_PARENTHESIS
    (39) operation -> . VARIABLE OP_MATE_PLUS VARIABLE
    (40) operation -> . VARIABLE OP_MATE_MINUS VARIABLE
    (41) operation -> . VARIABLE OP_MATE_TIMES VARIABLE
    (42) operation -> . VARIABLE OP_MATE_DIVISION VARIABLE
    (43) operation -> . VARIABLE OP_MATE_MODULE VARIABLE
    (44) conditional -> . VARIABLE OP_RELA_LESS NUMERIC
    (45) conditional -> . VARIABLE OP_RELA_LESS BOOLEAN
    (46) conditional -> . VARIABLE OP_RELA_LESS LITERAL
    (47) conditional -> . VARIABLE OP_RELA_LESS CHARACTER
    (48) conditional -> . VARIABLE OP_RELA_LESS VARIABLE
    (49) conditional -> . VARIABLE OP_RELA_BIGGER NUMERIC
    (50) conditional -> . VARIABLE OP_RELA_BIGGER BOOLEAN
    (51) conditional -> . VARIABLE OP_RELA_BIGGER LITERAL
    (52) conditional -> . VARIABLE OP_RELA_BIGGER CHARACTER
    (53) conditional -> . VARIABLE OP_RELA_BIGGER VARIABLE
    (54) conditional -> . VARIABLE OP_RELA_LESS_EQUAL NUMERIC
    (55) conditional -> . VARIABLE OP_RELA_LESS_EQUAL BOOLEAN
    (56) conditional -> . VARIABLE OP_RELA_LESS_EQUAL LITERAL
    (57) conditional -> . VARIABLE OP_RELA_LESS_EQUAL CHARACTER
    (58) conditional -> . VARIABLE OP_RELA_LESS_EQUAL VARIABLE
    (59) conditional -> . VARIABLE OP_RELA_BIGGER_EQUAL NUMERIC
    (60) conditional -> . VARIABLE OP_RELA_BIGGER_EQUAL BOOLEAN
    (61) conditional -> . VARIABLE OP_RELA_BIGGER_EQUAL LITERAL
    (62) conditional -> . VARIABLE OP_RELA_BIGGER_EQUAL CHARACTER
    (63) conditional -> . VARIABLE OP_RELA_BIGGER_EQUAL VARIABLE
    (64) conditional -> . VARIABLE OP_RELA_COMPARE NUMERIC
    (65) conditional -> . VARIABLE OP_RELA_COMPARE BOOLEAN
    (66) conditional -> . VARIABLE OP_RELA_COMPARE LITERAL
    (67) conditional -> . VARIABLE OP_RELA_COMPARE CHARACTER
    (68) conditional -> . VARIABLE OP_RELA_COMPARE VARIABLE
    (69) conditional -> . VARIABLE OP_RELA_DIFFERENTIATE NUMERIC
    (70) conditional -> . VARIABLE OP_RELA_DIFFERENTIATE BOOLEAN
    (71) conditional -> . VARIABLE OP_RELA_DIFFERENTIATE LITERAL
    (72) conditional -> . VARIABLE OP_RELA_DIFFERENTIATE CHARACTER
    (73) conditional -> . VARIABLE OP_RELA_DIFFERENTIATE VARIABLE
    (74) value -> . CHARACTER
    (75) value -> . LITERAL
    (76) value -> . NUMERIC
    (77) value -> . BOOLEAN

    OP_MARK_COMMENT shift and go to state 11
    INT             shift and go to state 12
    DOUBLE          shift and go to state 14
    BOOL            shift and go to state 15
    CHARACTER       shift and go to state 16
    STRING          shift and go to state 17
    VARIABLE        shift and go to state 13
    IF              shift and go to state 21
    OP_EXPR_OPEN_PARENTHESIS shift and go to state 22
    LITERAL         shift and go to state 20
    NUMERIC         shift and go to state 18
    BOOLEAN         shift and go to state 19

    conditional                    shift and go to state 9
    statement                      shift and go to state 133
    comment                        shift and go to state 3
    declaration                    shift and go to state 4
    assignment                     shift and go to state 5
    decision                       shift and go to state 6
    expression                     shift and go to state 7
    operation                      shift and go to state 8
    value                          shift and go to state 10

state 133

    (11) decision -> IF OP_EXPR_OPEN_PARENTHESIS conditional OP_EXPR_CLOSE_PARENTHESIS OP_EXEC_COLON statement .
    (12) decision -> IF OP_EXPR_OPEN_PARENTHESIS conditional OP_EXPR_CLOSE_PARENTHESIS OP_EXEC_COLON statement . ELSE OP_EXEC_COLON statement

  ! shift/reduce conflict for ELSE resolved as shift
    OP_MARK_COMMENT reduce using rule 11 (decision -> IF OP_EXPR_OPEN_PARENTHESIS conditional OP_EXPR_CLOSE_PARENTHESIS OP_EXEC_COLON statement .)
    INT             reduce using rule 11 (decision -> IF OP_EXPR_OPEN_PARENTHESIS conditional OP_EXPR_CLOSE_PARENTHESIS OP_EXEC_COLON statement .)
    DOUBLE          reduce using rule 11 (decision -> IF OP_EXPR_OPEN_PARENTHESIS conditional OP_EXPR_CLOSE_PARENTHESIS OP_EXEC_COLON statement .)
    BOOL            reduce using rule 11 (decision -> IF OP_EXPR_OPEN_PARENTHESIS conditional OP_EXPR_CLOSE_PARENTHESIS OP_EXEC_COLON statement .)
    CHARACTER       reduce using rule 11 (decision -> IF OP_EXPR_OPEN_PARENTHESIS conditional OP_EXPR_CLOSE_PARENTHESIS OP_EXEC_COLON statement .)
    STRING          reduce using rule 11 (decision -> IF OP_EXPR_OPEN_PARENTHESIS conditional OP_EXPR_CLOSE_PARENTHESIS OP_EXEC_COLON statement .)
    VARIABLE        reduce using rule 11 (decision -> IF OP_EXPR_OPEN_PARENTHESIS conditional OP_EXPR_CLOSE_PARENTHESIS OP_EXEC_COLON statement .)
    IF              reduce using rule 11 (decision -> IF OP_EXPR_OPEN_PARENTHESIS conditional OP_EXPR_CLOSE_PARENTHESIS OP_EXEC_COLON statement .)
    OP_EXPR_OPEN_PARENTHESIS reduce using rule 11 (decision -> IF OP_EXPR_OPEN_PARENTHESIS conditional OP_EXPR_CLOSE_PARENTHESIS OP_EXEC_COLON statement .)
    LITERAL         reduce using rule 11 (decision -> IF OP_EXPR_OPEN_PARENTHESIS conditional OP_EXPR_CLOSE_PARENTHESIS OP_EXEC_COLON statement .)
    NUMERIC         reduce using rule 11 (decision -> IF OP_EXPR_OPEN_PARENTHESIS conditional OP_EXPR_CLOSE_PARENTHESIS OP_EXEC_COLON statement .)
    BOOLEAN         reduce using rule 11 (decision -> IF OP_EXPR_OPEN_PARENTHESIS conditional OP_EXPR_CLOSE_PARENTHESIS OP_EXEC_COLON statement .)
    $end            reduce using rule 11 (decision -> IF OP_EXPR_OPEN_PARENTHESIS conditional OP_EXPR_CLOSE_PARENTHESIS OP_EXEC_COLON statement .)
    ELSE            shift and go to state 134

  ! ELSE            [ reduce using rule 11 (decision -> IF OP_EXPR_OPEN_PARENTHESIS conditional OP_EXPR_CLOSE_PARENTHESIS OP_EXEC_COLON statement .) ]


state 134

    (12) decision -> IF OP_EXPR_OPEN_PARENTHESIS conditional OP_EXPR_CLOSE_PARENTHESIS OP_EXEC_COLON statement ELSE . OP_EXEC_COLON statement

    OP_EXEC_COLON   shift and go to state 135


state 135

    (12) decision -> IF OP_EXPR_OPEN_PARENTHESIS conditional OP_EXPR_CLOSE_PARENTHESIS OP_EXEC_COLON statement ELSE OP_EXEC_COLON . statement
    (3) statement -> . comment
    (4) statement -> . declaration
    (5) statement -> . assignment
    (6) statement -> . decision
    (7) statement -> . expression
    (8) statement -> . operation
    (9) statement -> . conditional
    (10) statement -> . value
    (33) comment -> . OP_MARK_COMMENT
    (34) declaration -> . INT VARIABLE EOB
    (35) declaration -> . DOUBLE VARIABLE EOB
    (36) declaration -> . BOOL VARIABLE EOB
    (37) declaration -> . CHARACTER VARIABLE EOB
    (38) declaration -> . STRING VARIABLE EOB
    (16) assignment -> . INT VARIABLE OP_ATRI_EQUAL NUMERIC EOB
    (17) assignment -> . DOUBLE VARIABLE OP_ATRI_EQUAL NUMERIC EOB
    (18) assignment -> . BOOL VARIABLE OP_ATRI_EQUAL BOOLEAN EOB
    (19) assignment -> . CHARACTER VARIABLE OP_ATRI_EQUAL CHAR EOB
    (20) assignment -> . STRING VARIABLE OP_ATRI_EQUAL LITERAL EOB
    (21) assignment -> . INT VARIABLE OP_ATRI_EQUAL VARIABLE EOB
    (22) assignment -> . DOUBLE VARIABLE OP_ATRI_EQUAL VARIABLE EOB
    (23) assignment -> . BOOL VARIABLE OP_ATRI_EQUAL VARIABLE EOB
    (24) assignment -> . CHARACTER VARIABLE OP_ATRI_EQUAL VARIABLE EOB
    (25) assignment -> . STRING VARIABLE OP_ATRI_EQUAL VARIABLE EOB
    (26) assignment -> . INT VARIABLE OP_ATRI_EQUAL operation EOB
    (27) assignment -> . DOUBLE VARIABLE OP_ATRI_EQUAL operation EOB
    (28) assignment -> . VARIABLE OP_ATRI_EQUAL NUMERIC EOB
    (29) assignment -> . VARIABLE OP_ATRI_EQUAL BOOLEAN EOB
    (30) assignment -> . VARIABLE OP_ATRI_EQUAL CHARACTER EOB
    (31) assignment -> . VARIABLE OP_ATRI_EQUAL LITERAL EOB
    (32) assignment -> . VARIABLE OP_ATRI_EQUAL VARIABLE EOB
    (11) decision -> . IF OP_EXPR_OPEN_PARENTHESIS conditional OP_EXPR_CLOSE_PARENTHESIS OP_EXEC_COLON statement
    (12) decision -> . IF OP_EXPR_OPEN_PARENTHESIS conditional OP_EXPR_CLOSE_PARENTHESIS OP_EXEC_COLON statement ELSE OP_EXEC_COLON statement
    (13) expression -> . OP_EXPR_OPEN_PARENTHESIS conditional OP_EXPR_CLOSE_PARENTHESIS
    (14) expression -> . OP_EXPR_OPEN_PARENTHESIS operation OP_EXPR_CLOSE_PARENTHESIS
    (15) expression -> . OP_EXPR_OPEN_PARENTHESIS value OP_EXPR_CLOSE_PARENTHESIS
    (39) operation -> . VARIABLE OP_MATE_PLUS VARIABLE
    (40) operation -> . VARIABLE OP_MATE_MINUS VARIABLE
    (41) operation -> . VARIABLE OP_MATE_TIMES VARIABLE
    (42) operation -> . VARIABLE OP_MATE_DIVISION VARIABLE
    (43) operation -> . VARIABLE OP_MATE_MODULE VARIABLE
    (44) conditional -> . VARIABLE OP_RELA_LESS NUMERIC
    (45) conditional -> . VARIABLE OP_RELA_LESS BOOLEAN
    (46) conditional -> . VARIABLE OP_RELA_LESS LITERAL
    (47) conditional -> . VARIABLE OP_RELA_LESS CHARACTER
    (48) conditional -> . VARIABLE OP_RELA_LESS VARIABLE
    (49) conditional -> . VARIABLE OP_RELA_BIGGER NUMERIC
    (50) conditional -> . VARIABLE OP_RELA_BIGGER BOOLEAN
    (51) conditional -> . VARIABLE OP_RELA_BIGGER LITERAL
    (52) conditional -> . VARIABLE OP_RELA_BIGGER CHARACTER
    (53) conditional -> . VARIABLE OP_RELA_BIGGER VARIABLE
    (54) conditional -> . VARIABLE OP_RELA_LESS_EQUAL NUMERIC
    (55) conditional -> . VARIABLE OP_RELA_LESS_EQUAL BOOLEAN
    (56) conditional -> . VARIABLE OP_RELA_LESS_EQUAL LITERAL
    (57) conditional -> . VARIABLE OP_RELA_LESS_EQUAL CHARACTER
    (58) conditional -> . VARIABLE OP_RELA_LESS_EQUAL VARIABLE
    (59) conditional -> . VARIABLE OP_RELA_BIGGER_EQUAL NUMERIC
    (60) conditional -> . VARIABLE OP_RELA_BIGGER_EQUAL BOOLEAN
    (61) conditional -> . VARIABLE OP_RELA_BIGGER_EQUAL LITERAL
    (62) conditional -> . VARIABLE OP_RELA_BIGGER_EQUAL CHARACTER
    (63) conditional -> . VARIABLE OP_RELA_BIGGER_EQUAL VARIABLE
    (64) conditional -> . VARIABLE OP_RELA_COMPARE NUMERIC
    (65) conditional -> . VARIABLE OP_RELA_COMPARE BOOLEAN
    (66) conditional -> . VARIABLE OP_RELA_COMPARE LITERAL
    (67) conditional -> . VARIABLE OP_RELA_COMPARE CHARACTER
    (68) conditional -> . VARIABLE OP_RELA_COMPARE VARIABLE
    (69) conditional -> . VARIABLE OP_RELA_DIFFERENTIATE NUMERIC
    (70) conditional -> . VARIABLE OP_RELA_DIFFERENTIATE BOOLEAN
    (71) conditional -> . VARIABLE OP_RELA_DIFFERENTIATE LITERAL
    (72) conditional -> . VARIABLE OP_RELA_DIFFERENTIATE CHARACTER
    (73) conditional -> . VARIABLE OP_RELA_DIFFERENTIATE VARIABLE
    (74) value -> . CHARACTER
    (75) value -> . LITERAL
    (76) value -> . NUMERIC
    (77) value -> . BOOLEAN

    OP_MARK_COMMENT shift and go to state 11
    INT             shift and go to state 12
    DOUBLE          shift and go to state 14
    BOOL            shift and go to state 15
    CHARACTER       shift and go to state 16
    STRING          shift and go to state 17
    VARIABLE        shift and go to state 13
    IF              shift and go to state 21
    OP_EXPR_OPEN_PARENTHESIS shift and go to state 22
    LITERAL         shift and go to state 20
    NUMERIC         shift and go to state 18
    BOOLEAN         shift and go to state 19

    conditional                    shift and go to state 9
    statement                      shift and go to state 136
    comment                        shift and go to state 3
    declaration                    shift and go to state 4
    assignment                     shift and go to state 5
    decision                       shift and go to state 6
    expression                     shift and go to state 7
    operation                      shift and go to state 8
    value                          shift and go to state 10

state 136

    (12) decision -> IF OP_EXPR_OPEN_PARENTHESIS conditional OP_EXPR_CLOSE_PARENTHESIS OP_EXEC_COLON statement ELSE OP_EXEC_COLON statement .

    OP_MARK_COMMENT reduce using rule 12 (decision -> IF OP_EXPR_OPEN_PARENTHESIS conditional OP_EXPR_CLOSE_PARENTHESIS OP_EXEC_COLON statement ELSE OP_EXEC_COLON statement .)
    INT             reduce using rule 12 (decision -> IF OP_EXPR_OPEN_PARENTHESIS conditional OP_EXPR_CLOSE_PARENTHESIS OP_EXEC_COLON statement ELSE OP_EXEC_COLON statement .)
    DOUBLE          reduce using rule 12 (decision -> IF OP_EXPR_OPEN_PARENTHESIS conditional OP_EXPR_CLOSE_PARENTHESIS OP_EXEC_COLON statement ELSE OP_EXEC_COLON statement .)
    BOOL            reduce using rule 12 (decision -> IF OP_EXPR_OPEN_PARENTHESIS conditional OP_EXPR_CLOSE_PARENTHESIS OP_EXEC_COLON statement ELSE OP_EXEC_COLON statement .)
    CHARACTER       reduce using rule 12 (decision -> IF OP_EXPR_OPEN_PARENTHESIS conditional OP_EXPR_CLOSE_PARENTHESIS OP_EXEC_COLON statement ELSE OP_EXEC_COLON statement .)
    STRING          reduce using rule 12 (decision -> IF OP_EXPR_OPEN_PARENTHESIS conditional OP_EXPR_CLOSE_PARENTHESIS OP_EXEC_COLON statement ELSE OP_EXEC_COLON statement .)
    VARIABLE        reduce using rule 12 (decision -> IF OP_EXPR_OPEN_PARENTHESIS conditional OP_EXPR_CLOSE_PARENTHESIS OP_EXEC_COLON statement ELSE OP_EXEC_COLON statement .)
    IF              reduce using rule 12 (decision -> IF OP_EXPR_OPEN_PARENTHESIS conditional OP_EXPR_CLOSE_PARENTHESIS OP_EXEC_COLON statement ELSE OP_EXEC_COLON statement .)
    OP_EXPR_OPEN_PARENTHESIS reduce using rule 12 (decision -> IF OP_EXPR_OPEN_PARENTHESIS conditional OP_EXPR_CLOSE_PARENTHESIS OP_EXEC_COLON statement ELSE OP_EXEC_COLON statement .)
    LITERAL         reduce using rule 12 (decision -> IF OP_EXPR_OPEN_PARENTHESIS conditional OP_EXPR_CLOSE_PARENTHESIS OP_EXEC_COLON statement ELSE OP_EXEC_COLON statement .)
    NUMERIC         reduce using rule 12 (decision -> IF OP_EXPR_OPEN_PARENTHESIS conditional OP_EXPR_CLOSE_PARENTHESIS OP_EXEC_COLON statement ELSE OP_EXEC_COLON statement .)
    BOOLEAN         reduce using rule 12 (decision -> IF OP_EXPR_OPEN_PARENTHESIS conditional OP_EXPR_CLOSE_PARENTHESIS OP_EXEC_COLON statement ELSE OP_EXEC_COLON statement .)
    $end            reduce using rule 12 (decision -> IF OP_EXPR_OPEN_PARENTHESIS conditional OP_EXPR_CLOSE_PARENTHESIS OP_EXEC_COLON statement ELSE OP_EXEC_COLON statement .)
    ELSE            reduce using rule 12 (decision -> IF OP_EXPR_OPEN_PARENTHESIS conditional OP_EXPR_CLOSE_PARENTHESIS OP_EXEC_COLON statement ELSE OP_EXEC_COLON statement .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for VARIABLE in state 16 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 133 resolved as shift

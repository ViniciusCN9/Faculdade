
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'BOOL CHAR DOUBLE ELSE EOB FALSE FOR IF IGNORE INT OP_ATRI_DENIAL OP_ATRI_DIVISION_EQUAL OP_ATRI_EQUAL OP_ATRI_MINUS_EQUAL OP_ATRI_PLUS_EQUAL OP_ATRI_TIMES_EQUAL OP_EXEC_COLON OP_EXEC_COMMA OP_EXEC_DOT OP_EXPR_CLOSE_BRACKETS OP_EXPR_CLOSE_CURLY_BRACKETS OP_EXPR_CLOSE_PARENTHESIS OP_EXPR_OPEN_BRACKETS OP_EXPR_OPEN_CURLY_BRACKETS OP_EXPR_OPEN_PARENTHESIS OP_LOGI_AND OP_LOGI_OR OP_MARK_COMMENT OP_MARK_DQUOTES OP_MARK_SQUOTES OP_MATE_DIVISION OP_MATE_MINUS OP_MATE_MODULE OP_MATE_PLUS OP_MATE_TIMES OP_RELA_BIGGER OP_RELA_BIGGER_EQUAL OP_RELA_COMPARE OP_RELA_DIFFERENTIATE OP_RELA_LESS OP_RELA_LESS_EQUAL RESERVED STRING TRUE VARIABLE WHILE\n    statements : statements statement\n    \n    statements : statement\n    \n    statement : OP_MARK_COMMENT\n    \n    statement : VARIABLE OP_ATRI_EQUAL INT EOB\n            | VARIABLE OP_ATRI_EQUAL TRUE EOB\n            | VARIABLE OP_ATRI_EQUAL FALSE EOB\n            | VARIABLE OP_ATRI_EQUAL expression EOB\n    \n    statement : IF OP_EXPR_OPEN_PARENTHESIS conditional OP_EXPR_CLOSE_PARENTHESIS OP_EXEC_COLON statements\n            | IF OP_EXPR_OPEN_PARENTHESIS conditional OP_EXPR_CLOSE_PARENTHESIS OP_EXEC_COLON statements ELSE OP_EXEC_COLON statements\n    \n    expression : VARIABLE OP_MATE_PLUS VARIABLE\n            | VARIABLE OP_MATE_MINUS VARIABLE\n            | VARIABLE OP_MATE_TIMES VARIABLE\n            | VARIABLE OP_MATE_DIVISION VARIABLE\n            | VARIABLE OP_MATE_MODULE VARIABLE\n    \n    conditional : VARIABLE OP_RELA_COMPARE INT\n    \n    expression : OP_EXPR_OPEN_PARENTHESIS expression OP_EXPR_CLOSE_PARENTHESIS\n    \n    expression : INT\n            | DOUBLE\n    \n    expression : TRUE\n            | FALSE\n    '
    
_lr_action_items = {'OP_MARK_COMMENT':([0,1,2,3,6,23,24,25,26,39,41,43,44,],[3,3,-2,-3,-1,-4,-5,-6,-7,3,3,3,3,]),'VARIABLE':([0,1,2,3,6,7,8,14,18,19,20,21,22,23,24,25,26,39,41,43,44,],[4,4,-2,-3,-1,9,17,9,33,34,35,36,37,-4,-5,-6,-7,4,4,4,4,]),'IF':([0,1,2,3,6,23,24,25,26,39,41,43,44,],[5,5,-2,-3,-1,-4,-5,-6,-7,5,5,5,5,]),'$end':([1,2,3,6,23,24,25,26,41,44,],[0,-2,-3,-1,-4,-5,-6,-7,-8,-9,]),'ELSE':([2,3,6,23,24,25,26,41,44,],[-2,-3,-1,-4,-5,-6,-7,42,-9,]),'OP_ATRI_EQUAL':([4,],[7,]),'OP_EXPR_OPEN_PARENTHESIS':([5,7,14,],[8,14,14,]),'INT':([7,14,32,],[10,28,40,]),'TRUE':([7,14,],[11,29,]),'FALSE':([7,14,],[12,30,]),'DOUBLE':([7,14,],[15,15,]),'OP_MATE_PLUS':([9,],[18,]),'OP_MATE_MINUS':([9,],[19,]),'OP_MATE_TIMES':([9,],[20,]),'OP_MATE_DIVISION':([9,],[21,]),'OP_MATE_MODULE':([9,],[22,]),'EOB':([10,11,12,13,15,33,34,35,36,37,38,],[23,24,25,26,-18,-10,-11,-12,-13,-14,-16,]),'OP_EXPR_CLOSE_PARENTHESIS':([15,16,27,28,29,30,33,34,35,36,37,38,40,],[-18,31,38,-17,-19,-20,-10,-11,-12,-13,-14,-16,-15,]),'OP_RELA_COMPARE':([17,],[32,]),'OP_EXEC_COLON':([31,42,],[39,43,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'statements':([0,39,43,],[1,41,44,]),'statement':([0,1,39,41,43,44,],[2,6,2,6,2,6,]),'expression':([7,14,],[13,27,]),'conditional':([8,],[16,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> statements","S'",1,None,None,None),
  ('statements -> statements statement','statements',2,'p_statements_multiple','syntactic.py',8),
  ('statements -> statement','statements',1,'p_statements_single','syntactic.py',13),
  ('statement -> OP_MARK_COMMENT','statement',1,'p_statement_comment','syntactic.py',18),
  ('statement -> VARIABLE OP_ATRI_EQUAL INT EOB','statement',4,'p_statement_assignment','syntactic.py',23),
  ('statement -> VARIABLE OP_ATRI_EQUAL TRUE EOB','statement',4,'p_statement_assignment','syntactic.py',24),
  ('statement -> VARIABLE OP_ATRI_EQUAL FALSE EOB','statement',4,'p_statement_assignment','syntactic.py',25),
  ('statement -> VARIABLE OP_ATRI_EQUAL expression EOB','statement',4,'p_statement_assignment','syntactic.py',26),
  ('statement -> IF OP_EXPR_OPEN_PARENTHESIS conditional OP_EXPR_CLOSE_PARENTHESIS OP_EXEC_COLON statements','statement',6,'p_statement_conditional','syntactic.py',31),
  ('statement -> IF OP_EXPR_OPEN_PARENTHESIS conditional OP_EXPR_CLOSE_PARENTHESIS OP_EXEC_COLON statements ELSE OP_EXEC_COLON statements','statement',9,'p_statement_conditional','syntactic.py',32),
  ('expression -> VARIABLE OP_MATE_PLUS VARIABLE','expression',3,'p_expression_operation','syntactic.py',37),
  ('expression -> VARIABLE OP_MATE_MINUS VARIABLE','expression',3,'p_expression_operation','syntactic.py',38),
  ('expression -> VARIABLE OP_MATE_TIMES VARIABLE','expression',3,'p_expression_operation','syntactic.py',39),
  ('expression -> VARIABLE OP_MATE_DIVISION VARIABLE','expression',3,'p_expression_operation','syntactic.py',40),
  ('expression -> VARIABLE OP_MATE_MODULE VARIABLE','expression',3,'p_expression_operation','syntactic.py',41),
  ('conditional -> VARIABLE OP_RELA_COMPARE INT','conditional',3,'p_conditional','syntactic.py',46),
  ('expression -> OP_EXPR_OPEN_PARENTHESIS expression OP_EXPR_CLOSE_PARENTHESIS','expression',3,'p_expression_group','syntactic.py',51),
  ('expression -> INT','expression',1,'p_expression_number','syntactic.py',56),
  ('expression -> DOUBLE','expression',1,'p_expression_number','syntactic.py',57),
  ('expression -> TRUE','expression',1,'p_expression_bool','syntactic.py',62),
  ('expression -> FALSE','expression',1,'p_expression_bool','syntactic.py',63),
]
